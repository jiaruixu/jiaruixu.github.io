<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-08T15:24:22.237Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker install</title>
    <link href="http://yoursite.com/2018/05/08/Docker-install/"/>
    <id>http://yoursite.com/2018/05/08/Docker-install/</id>
    <published>2018-05-08T15:11:10.000Z</published>
    <updated>2018-05-08T15:24:22.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考网页"><a href="#参考网页" class="headerlink" title="参考网页"></a>参考网页</h2><p>[1] <a href="https://yeasy.gitbooks.io/docker_practice/content/install/ubuntu.html" target="_blank" rel="noopener">Ubuntu 安装 Docker CE</a></p><p>[2] <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">官方文档</a></p><p>[3] <a href="https://techoverflow.net/2017/03/01/solving-docker-permission-denied-while-trying-to-connect-to-the-docker-daemon-socket/" target="_blank" rel="noopener">Solving Docker permission denied while trying to connect to the Docker daemon socket</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><p>Docker CE 支持以下版本的 Ubuntu 操作系统：</p><ul><li>Artful 17.10 (Docker CE 17.11 Edge +)</li><li>Xenial 16.04 (LTS)</li><li>Trusty 14.04 (LTS)</li></ul><p>Docker CE 可以安装在 64 位的 x86 平台或 ARM 平台上。Ubuntu 发行版中，LTS（Long-Term-Support）长期支持版本，会获得 5 年的升级维护支持，这样的版本会更稳定，因此在生产环境中推荐使用 LTS 版本,当前最新的 LTS 版本为 Ubuntu 16.04。</p><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><p>旧版本的 Docker 称为 docker 或者 docker-engine，使用以下命令卸载旧版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker \</span><br><span class="line">               docker-engine \</span><br><span class="line">               docker.io</span><br></pre></td></tr></table></figure><h3 id="Ubuntu-16-04"><a href="#Ubuntu-16-04" class="headerlink" title="Ubuntu 16.04 +"></a>Ubuntu 16.04 +</h3><p>Ubuntu 16.04 + 上的 Docker CE 默认使用 overlay2 存储层驱动,无需手动配置。</p><h2 id="使用-APT-安装"><a href="#使用-APT-安装" class="headerlink" title="使用 APT 安装"></a>使用 APT 安装</h2><p>1 由于 apt 源使用 HTTPS 以确保软件下载过程中不被篡改。因此，我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><p>2 为了确认所下载软件包的合法性，需要添加软件源的 GPG 密钥。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>3 Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88, by searching for the last 8 characters of the fingerprint.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class="line"></span><br><span class="line">pub   4096R/0EBFCD88 2017-02-22</span><br><span class="line">      Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88</span><br><span class="line">uid                  Docker Release (CE deb) &lt;docker@docker.com&gt;</span><br><span class="line">sub   4096R/F273FCD8 2017-02-22</span><br></pre></td></tr></table></figure><p>4 然后，我们需要向 source.list 中添加 Docker 软件源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository \</span><br><span class="line">   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><br><span class="line">   $(lsb_release -cs) \</span><br><span class="line">   stable&quot;</span><br></pre></td></tr></table></figure><p>以上命令会添加稳定版本的 Docker CE APT 镜像源，如果需要最新或者测试版本的 Docker CE 请在 stable 后加上 edge 或者 test。从 Docker 17.06 开始，edge test 版本的 APT 镜像源也会包含稳定版本的 Docker。</p><p>5 安装 Docker CE</p><p>更新 apt 软件包缓存，并安装 docker-ce：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><h2 id="启动-Docker-CE"><a href="#启动-Docker-CE" class="headerlink" title="启动 Docker CE"></a>启动 Docker CE</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl enable docker</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>建立 docker 用户组<br>默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组。</p><p>建立 docker 组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br><span class="line">将当前用户加入 docker 组：</span><br><span class="line"></span><br><span class="line">$ sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><p>退出当前终端并<strong>重新登录</strong>，进行如下测试。</p><p>测试 Docker 是否安装正确</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ docker run hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image &apos;hello-world:latest&apos; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">ca4f61b1923c: Pull complete</span><br><span class="line">Digest: sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://cloud.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/engine/userguide/</span><br></pre></td></tr></table></figure><p>若能正常输出以上信息，则说明安装成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考网页&quot;&gt;&lt;a href=&quot;#参考网页&quot; class=&quot;headerlink&quot; title=&quot;参考网页&quot;&gt;&lt;/a&gt;参考网页&lt;/h2&gt;&lt;p&gt;[1] &lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Git Command Notes</title>
    <link href="http://yoursite.com/2018/05/04/Github-Command-Notes/"/>
    <id>http://yoursite.com/2018/05/04/Github-Command-Notes/</id>
    <published>2018-05-04T19:06:52.000Z</published>
    <updated>2018-05-05T01:27:47.297Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="Git-的三种状态"><a href="#Git-的三种状态" class="headerlink" title="Git 的三种状态"></a>Git 的三种状态</h3><p>Git 有三种状态，你的文件可能处于其中之一：已提交（committed）、已修改（modified）和已暂存（staged）。 </p><ul><li><p>已提交：表示数据已经安全的保存在本地数据库中。 </p></li><li><p>已修改：表示修改了文件，但还没保存到数据库中。 </p></li><li><p>已暂存：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</p></li></ul><p>由此引入 Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。</p><p><img src="/2018/05/04/Github-Command-Notes/areas.png" alt="areas"></p><p>Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。</p><p>工作目录是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p><p>暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作`‘索引’’，不过一般说法还是叫暂存区域。</p><p>基本的 Git 工作流程如下：</p><p>1 在工作目录中修改文件。</p><p>2 暂存文件，将文件的快照放入暂存区域。</p><p>3 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录</p><h2 id="记录每次更新到仓库"><a href="#记录每次更新到仓库" class="headerlink" title="记录每次更新到仓库"></a>记录每次更新到仓库</h2><p>工作目录中除已跟踪文件以外的所有其它文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有放入暂存区。 初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。</p><p>编辑过某些文件之后，由于自上次提交后你对它们做了修改，Git 将它们标记为已修改文件。 我们逐步将这些修改过的文件放入暂存区，然后提交所有暂存了的修改，如此反复。所以使用 Git 时文件的生命周期如下：</p><p><img src="/2018/05/04/Github-Command-Notes/lifecycle.png" alt="lifecycle.png"></p><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。 来看一个实际的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat .gitignore</span><br><span class="line">*.[oa]</span><br><span class="line">*~</span><br></pre></td></tr></table></figure><p>第一行告诉 Git 忽略所有以 <code>.o</code> 或 <code>.a</code> 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的。 第二行告诉 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。 此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。 要养成一开始就设置好 <code>.gitignore</code> 文件的习惯，以免将来误提交这类无用的文件。</p><p>文件 <code>.gitignore</code> 的格式规范如下：</p><ul><li><p>所有空行或者以 <code>＃</code> 开头的行都会被 Git 忽略。</p></li><li><p>可以使用标准的 glob 模式匹配。</p></li><li><p>匹配模式可以以（/）开头防止递归。</p></li><li><p>匹配模式可以以（/）结尾指定目录。</p></li><li><p>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</p></li></ul><p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。 星号（<code>*</code>）匹配零个或多个任意字符；<code>[abc]</code> 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（<code>?</code>）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 <code>[0-9]</code> 表示匹配所有 0 到 9 的数字）。 使用两个星号（<code>*</code>) 表示匹配任意中间目录，比如<code>a/**/z</code> 可以匹配 <code>a/z</code>, <code>a/b/z</code> 或 <code>a/b/c/z</code>等。</p><p>我们再看一个 <code>.gitignore</code> 文件的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># no .a files</span><br><span class="line">*.a</span><br><span class="line"></span><br><span class="line"># but do track lib.a, even though you&apos;re ignoring .a files above</span><br><span class="line">!lib.a</span><br><span class="line"></span><br><span class="line"># only ignore the TODO file in the current directory, not subdir/TODO</span><br><span class="line">/TODO</span><br><span class="line"></span><br><span class="line"># ignore all files in the build/ directory</span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"># ignore doc/notes.txt, but not doc/server/arch.txt</span><br><span class="line">doc/*.txt</span><br><span class="line"></span><br><span class="line"># ignore all .pdf files in the doc/ directory</span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><p><strong>Tip</strong>: GitHub 有一个十分详细的针对数十种项目及语言的 <code>.gitignore</code> 文件列表，你可以在 <a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a> 找到它.</p><h2 id="Git-remote"><a href="#Git-remote" class="headerlink" title="Git remote"></a>Git remote</h2><p>要 参与任何一个 Git 项目的协作,必须要了解该如何管理远程仓库.远程仓库是指托管在网络上的项目仓库,可能会有好多个,其中有些你只能读,另外有些可以写.同他人协作开发某 个项目时,需要管理这些远程仓库,以便推送或拉取数据,分享各自的工作进展.管理远程仓库的工作,包括添加远程库,移除废弃的远程库,管理各式远程库分 支,定义是否跟踪这些分支,等等.本节我们将详细讨论远程库的管理和使用.<br>　　查看当前的远程库</p><p>　　要查看当前配置有哪些远程仓库,可以用 git remote 命令,它会列出每个远程库的简短名字.在克隆完某个项目后,至少可以看到一个名为 origin 的远程库,Git 默认使用这个名字来标识你所克隆的原始仓库:</p><p>　　$ git clone git://github.com/schacon/ticgit.git</p><p>　　Initialized empty Git repository in /private/tmp/ticgit/.git/</p><p>　　remote: Counting objects: 595, done.</p><p>　　remote: Compressing objects: 100% (269/269), done.</p><p>　　remote: Total 595 (delta 255), reused 589 (delta 253)</p><p>　　Receiving objects: 100% (595/595), 73.31 KiB | 1 KiB/s, done.</p><p>　　Resolving deltas: 100% (255/255), done.</p><p>　　$ cd ticgit</p><p>（1）git remote 不带参数，列出已经存在的远程分支</p><p>　　$ git remote</p><p>　　origin</p><p>（2）git remote -v | –verbose 列出详细信息，在每一个名字后面列出其远程url</p><p>此时， -v 选项(译注:此为 –verbose 的简写,取首字母),显示对应的克隆地址:</p><p>　　$ git remote -v</p><p>　　origin git://github.com/schacon/ticgit.git如果有多个远程仓库,此命令将全部列出.比如在我的 Grit 项目中,可以看到:</p><p>　　$ cd grit</p><p>　　$ git remote -v</p><p>　　bakkdoor git://github.com/bakkdoor/grit.git</p><p>　　cho45 git://github.com/cho45/grit.git</p><p>　　defunkt git://github.com/defunkt/grit.git</p><p>　　koke git://github.com/koke/grit.git</p><p>　　origin 这样一来,我就可以非常轻松地从这些用户的仓库中,拉取他们的提交到本地.请注意,上面列出的地址只有 origin 用的是 SSH URL 链接,所以也只有这个仓库我能推送数据上去(我们会在第四章解释原因).</p><p>　　添加远程仓库</p><p>　　要添加一个新的远程仓库,可以指定一个简单的名字,以便将来引用,运行 git remote add [shortname] [url]:</p><p>　　$ git remote</p><p>　　origin</p><p>　　$ git remote add pb git://github.com/paulboone/ticgit.git</p><p>　　$ git remote -v</p><p>　　origin git://github.com/schacon/ticgit.git</p><p>　　pb git://github.com/paulboone/ticgit.git现在可以用字串 pb 指代对应的仓库地址了.比如说,要抓取所有 Paul 有的,但本地仓库没有的信息,可以运行 git fetch pb:</p><p>　　$ git fetch pb</p><p>　　remote: Counting objects: 58, done.</p><p>　　remote: Compressing objects: 100% (41/41), done.</p><p>　　remote: Total 44 (delta 24), reused 1 (delta 0)</p><p>　　Unpacking objects: 100% (44/44), done.</p><p>　　From git://github.com/paulboone/ticgit</p><p>　　* [new branch] master -&gt; pb/master</p><p>　　* [new branch] ticgit -&gt; pb/ticgit</p><p>现在,Paul 的主干分支(master)已经完全可以在本地访问了,对应的名字是 pb/master,你可以将它合并到自己的某个分支,或者切换到这个分支,看看有些什么有趣的更</p><p>二。通过git remote 建立远程仓库</p><p>建立远程仓库<br>最近一直在学习使用git来管理自己的程序，总是今天东学一点，明天西凑一点，到用的时候，总是有些茫然不知所措。</p><p>在博客园里看见一篇老好的文章，教我们做笔记啦，但是做完笔记还是要记得总结哦！</p><p>来吧，让我们一起来总结吧，今天先来看看git远程的仓库是怎么建立的。</p><p>当然，使用git嘛，第一步肯定是得新建一个git仓库，总得有个操作的空间吧,巧妇难为无米之炊嘛。</p><p>1.初始化一个空的git仓库</p><p>1 software@debian:~$ mkdir yafeng<br>2 software@debian:~$ cd yafeng/<br>3 software@debian:~/yafeng$ ls<br>4 software@debian:~/yafeng$ git init<br>5 Initialized empty Git repository in /home/software/yafeng/.git/<br>6 software@debian:~/yafeng$<br>命令注释：</p><p>在上面的命令中，真正去初始化的是第四行的那句—git init</p><p>当然，还有很多同学会看见加了参数–bare的命令，这个命令会在我们以后慢慢给大家解释，对于不是作为共享仓库，而是作为一个自己操作的仓库，上面这样就足够了。</p><p>好了，现在yafeng目录就是我们的据点—git仓库了哦。</p><p>下面我们总要做点什么的吧，入宝山总不能光看着哦：</p><p>2.向仓库提交我们写的文件</p><p>复制代码<br>1 software@debian:~/yafeng$ echo “our first git repository” &gt;&gt; file<br>2 software@debian:~/yafeng$ ls<br>3 file<br>4 software@debian:~/yafeng$ git add file<br>5 software@debian:~/yafeng$ git commit -m “the first file to commit” file<br>6 [master (root-commit) 0c72641] the first file to commit<br>7  1 files changed, 1 insertions(+), 0 deletions(-)<br>8  create mode 100644 file<br>9 software@debian:~/yafeng$<br>复制代码<br>命令解释：<br>我们在仓库中新建了一个文件file，作为我们的示例文件。</p><p>第4行：将file文件的信息添加到git仓库的索引库中，并没有真正添加到库。当然上例中的file文件只是我们的示例，它是一个路径，因此，可以是文件，更可以是目录。</p><p>第5行：将索引库中的内容向git仓库进行提交。这步之后文件file才算真正提交到拉git仓库中。双引号中的内容是根据每次修改的不同内容，由我们自己去填写的，</p><p>很多人会看见</p><p>　　git commit -a -m “ ”</p><p>这条的命令是在你已经add了一个或多个文件过之后，然后修改了这些文件，就可以使用该命令进行提交。</p><p>好了，不管怎么样，终于是将文件提交到库了。可是现在的仓库只是一个本地的仓库，我们的目标是变成远程仓库哦，继续吧。</p><p>3.在本地仓库添加一个远程仓库,并将本地的master分支跟踪到远程分支</p><p>1 software@debian:~/yafeng$ git remote add origin ssh:<a href="mailto://software@172.16.0.30" target="_blank" rel="noopener">//software@172.16.0.30</a>/~/yafeng/.git<br>2 software@debian:~/yafeng$ git push origin master<br>3 <a href="mailto:software@172.16.0.30" target="_blank" rel="noopener">software@172.16.0.30</a>‘s password:<br>4 Everything up-to-date<br>5 software@debian:~/yafeng$<br>命令注释:</p><p>第1行:在本地仓库添加一个远程仓库,当然ssh后面的地址是我们本地仓库的地址.</p><p>第2行:将本地master分支跟踪到远程分支,在git仓库建立之初就会有一个默认的master分支,当然你如果建立了其他分支,也可以用同样的方法去跟踪.</p><p>对于分支的事情,我们会在以后细细的讲述.</p><p>做到拉这一步了吗?我告诉你,你已经完成目的了哦,现在的git仓库已经是一个远程仓库了,</p><p>不相信吗?我们来测试一次阿:</p><p>4.测试</p><p>现在本机上看看:</p><p>复制代码<br> 1 software@debian:~/yafeng$ git remote show origin<br> 2 <a href="mailto:software@172.16.0.30" target="_blank" rel="noopener">software@172.16.0.30</a>‘s password:<br> 3 * remote origin<br> 4   Fetch URL: ssh:<a href="mailto://software@172.16.0.30" target="_blank" rel="noopener">//software@172.16.0.30</a>/~/yafeng/.git<br> 5   Push  URL: ssh:<a href="mailto://software@172.16.0.30" target="_blank" rel="noopener">//software@172.16.0.30</a>/~/yafeng/.git<br> 6   HEAD branch: master<br> 7   Remote branch:<br> 8     master tracked<br> 9   Local ref configured for ‘git push’:<br>10     master pushes to master (up to date)<br>11 software@debian:~/yafeng$<br>复制代码<br>代码注释:</p><p>第1行:显示远程信息</p><p>很多看见这还是会不以为然的,这又能说明什么呢?好,那就来点实际的:</p><p>在另一个机子上,远程clone</p><p>复制代码<br> 1 root@yafeng-VirtualBox:~# ls<br> 2 bin  gittest  read_temp<br> 3 root@yafeng-VirtualBox:~# git clone ssh:<a href="mailto://software@172.16.0.30" target="_blank" rel="noopener">//software@172.16.0.30</a>/~/yafeng/.git<br> 4 Cloning into yafeng…<br> 5 <a href="mailto:software@172.16.0.30" target="_blank" rel="noopener">software@172.16.0.30</a>‘s password:<br> 6 remote: Counting objects: 9, done.<br> 7 remote: Compressing objects: 100% (3/3), done.<br> 8 remote: Total 9 (delta 0), reused 0 (delta 0)<br> 9 Receiving objects: 100% (9/9), done.<br>10 root@yafeng-VirtualBox:~# ls<br>11 bin  gittest  read_temp  yafeng<br>12 root@yafeng-VirtualBox:~# cd yafeng/<br>13 root@yafeng-VirtualBox:~/yafeng# ls<br>14 file<br>15 root@yafeng-VirtualBox:~/yafeng#<br>复制代码<br>代码注释:</p><p>第3行:就是远程clone仓库.很明显的对比可以知道多了yafeng目录,而这个yafeng目录里的内容和我们另外一台机子上的内容一样</p><p>至此,一个简单的git远程仓库就建好了,简单不,试试吧!!</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://blog.csdn.net/wangjia55/article/details/8802490" target="_blank" rel="noopener">git命令之git remote的用法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;h3 id=&quot;Git-的三种状态&quot;&gt;&lt;a href=&quot;#Git-
      
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="Command" scheme="http://yoursite.com/tags/Command/"/>
    
  </entry>
  
  <entry>
    <title>Linux Command Learning notes</title>
    <link href="http://yoursite.com/2018/05/03/Linux-Learning-notes/"/>
    <id>http://yoursite.com/2018/05/03/Linux-Learning-notes/</id>
    <published>2018-05-04T00:51:22.000Z</published>
    <updated>2018-05-04T00:53:56.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lsmod"><a href="#lsmod" class="headerlink" title="lsmod"></a>lsmod</h2><p><code>lsmod</code> 命令在 Linux 中用来显示载入系统的功能模块。</p><p>Linux 操作系统的核心具有模块化的特性，因此在编译核心时，无需把全部的功能都放入核心。这些功能被编译成一个个单独的模块，待需要时再分别载入。</p><p>命令格式</p><pre><code>lsmod</code></pre><p>使用示例<br>查看系统已加载的功能模块:</p><pre><code>lsmod</code></pre><p>扩展知识<br>lsmod 命令会输出 4 列数据，每列说代表的意思如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第 1 列表示模块的名称。如 scsi_mod 表示 scsi 模块。</span><br><span class="line">第 2 列表示模块的大小。如 130637 表示 scsi_mod 模块的大小为 130637 字节。</span><br><span class="line">第 3 列表示依赖模块的个数。如 6 表示有 6 个模块依赖 scsi_mod 模块。</span><br><span class="line">第 4 列表示依赖模块的内容。如 qla2xxx 表示 Qlogic FC HBA 光纤 HBA 卡模块。</span><br></pre></td></tr></table></figure><p>通过 <code>grep</code> 命令的配合，可以方便的查找系统有没有加载指定模块。如:</p><pre><code>lsmod|grep -i ext3</code></pre><p>参考网页<a href="http://linux.zzxworld.com/lsmod.html" target="_blank" rel="noopener">http://linux.zzxworld.com/lsmod.html</a></p><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p><code>grep</code>全称是Global Regular Expression Print，表示全局正则表达式版本</p><p><code>grep</code>可用于shell脚本，因为grep通过返回一个状态值来说明搜索的状态，如果模板搜索成功，则返回0，如果搜索不成功，则返回1，如果搜索的文件不存在，则返回2。我们利用这些返回值就可进行一些自动化的文本处理工作。</p><h2 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h2><p>vi是Linux终端下或控制台下常用的编辑器，基本的操作方式为：</p><pre><code>vi /路径/文件名</code></pre><p>例如：vi /etc/fstab表示显示/etc/fstab文件的内容。使用键盘上的Page Up和Page Down键可以上下翻页；按下Insert键，可以见到窗口左下角有“Insert”字样，表示当前为插入编辑状态，这时从键盘输入的内容将插入到光标位置；再按下Insert键，左下角将有“Replace”字样，表示当前为替换编辑状态，这时从键盘输入的内容将替换光标位置的内容。编辑完内容后，按下Esc键，并输入“:wq”，然后回车就可以保存退出。</p><p>如果不想保存而直接退出，则按下Esc键后，输入“:q!”，然后回车即可。“wq”表示Write和Quit，即保存退出；“q!”表示忽略修改强行退出。</p><h2 id="nano"><a href="#nano" class="headerlink" title="nano"></a>nano</h2><pre><code>nano filename.txt</code></pre><p>[Ctrl]-G：取得在线帮助(help)。</p><p>[Ctrl]-X：离开nano软件，若有修改过文件会提示是否需要保存。</p><p>[Ctrl]-O：保存文件，若有权限的话就可以保存文件了。</p><p>[Ctrl]-R：从其他文件读入数据，可以将某个文件的内容贴在本文件中。 </p><p>[Ctrl]-W：查询字符串。[Ctrl]-C：说明目前光标所在处的行数与列数等信息。</p><p>[Ctrl]-_：可以直接输入行号，让光标快速移动到该行。</p><p>[Alt]-Y：校正语法功能开启或关闭(单击开，再单击关)。</p><p>[Alt]-M：可以支持鼠标来移动光标的功能。</p><h2 id="Linux-终止脚本进程"><a href="#Linux-终止脚本进程" class="headerlink" title="Linux 终止脚本进程"></a>Linux 终止脚本进程</h2><p>当<code>ctrl+C</code>没有用时，可以用<code>ps -ef | grep 进程名</code> 查出进程，然后kill该进程。</p><p>kill 的用法：<code>kill［信号代码］进程ID</code></p><p>注：信号代码可以省略；我们常用的信号代码是 -9 ，表示强制终止；</p><p><img src="/2018/05/03/Linux-Learning-notes/kill.png" alt="kill"></p><p>参考网页 <a href="https://blog.csdn.net/LY_Dengle/article/details/53997450" target="_blank" rel="noopener">linux停止正在执行脚本</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;lsmod&quot;&gt;&lt;a href=&quot;#lsmod&quot; class=&quot;headerlink&quot; title=&quot;lsmod&quot;&gt;&lt;/a&gt;lsmod&lt;/h2&gt;&lt;p&gt;&lt;code&gt;lsmod&lt;/code&gt; 命令在 Linux 中用来显示载入系统的功能模块。&lt;/p&gt;
&lt;p&gt;Linux 
      
    
    </summary>
    
    
      <category term="Command" scheme="http://yoursite.com/tags/Command/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Mapillary Vistas Dataset</title>
    <link href="http://yoursite.com/2018/05/02/Mapillary-Vistas-Dataset/"/>
    <id>http://yoursite.com/2018/05/02/Mapillary-Vistas-Dataset/</id>
    <published>2018-05-02T16:52:13.000Z</published>
    <updated>2018-05-02T17:17:58.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mapillary-Vistas-Dataset-Overview"><a href="#Mapillary-Vistas-Dataset-Overview" class="headerlink" title="Mapillary Vistas Dataset Overview"></a>Mapillary Vistas Dataset Overview</h2><ul><li><p>25,000 high-resolution images (split into 18,000 for training, 2,000 for validation, 5,000 for testing; at an average resolution of ~9 megapixels) with pixel-wise annotations from &gt;2 million manually drawn polygons</p></li><li><p>100 object categories, 60 of those instance-specific (i.e. to enumerate objects)</p></li><li><p>Global geographic reach, covering North and South America, Europe, Africa, Asia, and Oceania</p></li><li><p>High variability in weather conditions (sun, rain, snow, fog, haze) and capturing times (dawn, daylight, dusk, and even night)</p></li><li><p>Broad range of camera sensors, varying focal length, image aspect ratios, and different types of camera noise</p></li><li><p>Different capturing viewpoints (from road, sidewalks, and off-road)</p></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://blog.mapillary.com/product/2017/05/03/mapillary-vistas-dataset.html" target="_blank" rel="noopener">https://blog.mapillary.com/product/2017/05/03/mapillary-vistas-dataset.html</a></p><h2 id="Read-me"><a href="#Read-me" class="headerlink" title="Read me"></a>Read me</h2><p>The public set comprises <strong>20,000</strong> images, out of which <strong>18,000</strong> shall be used for <strong>training</strong> and the remaining <strong>2,000</strong> for <strong>validation</strong>. The official <strong>test set</strong> contains <strong>5,000</strong> RGB images, which will be released separately. We provide pixel-wise labels based on polygon annotations for <strong>66 object classes</strong>, where <strong>37</strong> are annotated in an <strong>instance-specific manner</strong> (i.e. individual instances are labeled separately). The folder structures contain raw RGB images ({training,validation}/images), <strong>class-specific labels</strong> for semantic segmentation (8-bit) (<code>{training,validation}/labels</code>) and <strong>instance-specific annotations</strong> (16-bit) (<code>{training,validation}/instances</code>). Please run ‘python demo.py’ from the extracted folder to get an idea about how to access label information and for mappings between label IDs and category names.</p><p>There are 66 labels in the config file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">                    Bird ( 0): animal--bird                                       has instances: True</span><br><span class="line">           Ground Animal ( 1): animal--ground-animal                              has instances: True</span><br><span class="line">                    Curb ( 2): construction--barrier--curb                        has instances: False</span><br><span class="line">                   Fence ( 3): construction--barrier--fence                       has instances: False</span><br><span class="line">              Guard Rail ( 4): construction--barrier--guard-rail                  has instances: False</span><br><span class="line">                 Barrier ( 5): construction--barrier--other-barrier               has instances: False</span><br><span class="line">                    Wall ( 6): construction--barrier--wall                        has instances: False</span><br><span class="line">               Bike Lane ( 7): construction--flat--bike-lane                      has instances: False</span><br><span class="line">       Crosswalk - Plain ( 8): construction--flat--crosswalk-plain                has instances: True</span><br><span class="line">                Curb Cut ( 9): construction--flat--curb-cut                       has instances: False</span><br><span class="line">                 Parking (10): construction--flat--parking                        has instances: False</span><br><span class="line">         Pedestrian Area (11): construction--flat--pedestrian-area                has instances: False</span><br><span class="line">              Rail Track (12): construction--flat--rail-track                     has instances: False</span><br><span class="line">                    Road (13): construction--flat--road                           has instances: False</span><br><span class="line">            Service Lane (14): construction--flat--service-lane                   has instances: False</span><br><span class="line">                Sidewalk (15): construction--flat--sidewalk                       has instances: False</span><br><span class="line">                  Bridge (16): construction--structure--bridge                    has instances: False</span><br><span class="line">                Building (17): construction--structure--building                  has instances: False</span><br><span class="line">                  Tunnel (18): construction--structure--tunnel                    has instances: False</span><br><span class="line">                  Person (19): human--person                                      has instances: True</span><br><span class="line">               Bicyclist (20): human--rider--bicyclist                            has instances: True</span><br><span class="line">            Motorcyclist (21): human--rider--motorcyclist                         has instances: True</span><br><span class="line">             Other Rider (22): human--rider--other-rider                          has instances: True</span><br><span class="line">Lane Marking - Crosswalk (23): marking--crosswalk-zebra                           has instances: True</span><br><span class="line">  Lane Marking - General (24): marking--general                                   has instances: False</span><br><span class="line">                Mountain (25): nature--mountain                                   has instances: False</span><br><span class="line">                    Sand (26): nature--sand                                       has instances: False</span><br><span class="line">                     Sky (27): nature--sky                                        has instances: False</span><br><span class="line">                    Snow (28): nature--snow                                       has instances: False</span><br><span class="line">                 Terrain (29): nature--terrain                                    has instances: False</span><br><span class="line">              Vegetation (30): nature--vegetation                                 has instances: False</span><br><span class="line">                   Water (31): nature--water                                      has instances: False</span><br><span class="line">                  Banner (32): object--banner                                     has instances: True</span><br><span class="line">                   Bench (33): object--bench                                      has instances: True</span><br><span class="line">               Bike Rack (34): object--bike-rack                                  has instances: True</span><br><span class="line">               Billboard (35): object--billboard                                  has instances: True</span><br><span class="line">             Catch Basin (36): object--catch-basin                                has instances: True</span><br><span class="line">             CCTV Camera (37): object--cctv-camera                                has instances: True</span><br><span class="line">            Fire Hydrant (38): object--fire-hydrant                               has instances: True</span><br><span class="line">            Junction Box (39): object--junction-box                               has instances: True</span><br><span class="line">                 Mailbox (40): object--mailbox                                    has instances: True</span><br><span class="line">                 Manhole (41): object--manhole                                    has instances: True</span><br><span class="line">             Phone Booth (42): object--phone-booth                                has instances: True</span><br><span class="line">                 Pothole (43): object--pothole                                    has instances: False</span><br><span class="line">            Street Light (44): object--street-light                               has instances: True</span><br><span class="line">                    Pole (45): object--support--pole                              has instances: True</span><br><span class="line">      Traffic Sign Frame (46): object--support--traffic-sign-frame                has instances: True</span><br><span class="line">            Utility Pole (47): object--support--utility-pole                      has instances: True</span><br><span class="line">           Traffic Light (48): object--traffic-light                              has instances: True</span><br><span class="line">     Traffic Sign (Back) (49): object--traffic-sign--back                         has instances: True</span><br><span class="line">    Traffic Sign (Front) (50): object--traffic-sign--front                        has instances: True</span><br><span class="line">               Trash Can (51): object--trash-can                                  has instances: True</span><br><span class="line">                 Bicycle (52): object--vehicle--bicycle                           has instances: True</span><br><span class="line">                    Boat (53): object--vehicle--boat                              has instances: True</span><br><span class="line">                     Bus (54): object--vehicle--bus                               has instances: True</span><br><span class="line">                     Car (55): object--vehicle--car                               has instances: True</span><br><span class="line">                 Caravan (56): object--vehicle--caravan                           has instances: True</span><br><span class="line">              Motorcycle (57): object--vehicle--motorcycle                        has instances: True</span><br><span class="line">                On Rails (58): object--vehicle--on-rails                          has instances: False</span><br><span class="line">           Other Vehicle (59): object--vehicle--other-vehicle                     has instances: True</span><br><span class="line">                 Trailer (60): object--vehicle--trailer                           has instances: True</span><br><span class="line">                   Truck (61): object--vehicle--truck                             has instances: True</span><br><span class="line">            Wheeled Slow (62): object--vehicle--wheeled-slow                      has instances: True</span><br><span class="line">               Car Mount (63): void--car-mount                                    has instances: False</span><br><span class="line">             Ego Vehicle (64): void--ego-vehicle                                  has instances: False</span><br><span class="line">               Unlabeled (65): void--unlabeled                                    has instances: False</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mapillary-Vistas-Dataset-Overview&quot;&gt;&lt;a href=&quot;#Mapillary-Vistas-Dataset-Overview&quot; class=&quot;headerlink&quot; title=&quot;Mapillary Vistas Dataset O
      
    
    </summary>
    
    
      <category term="Dataset" scheme="http://yoursite.com/tags/Dataset/"/>
    
      <category term="Mapillary Vistas" scheme="http://yoursite.com/tags/Mapillary-Vistas/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow and Python Learning Notes</title>
    <link href="http://yoursite.com/2018/05/02/Tensorflow-Learning-Notes/"/>
    <id>http://yoursite.com/2018/05/02/Tensorflow-Learning-Notes/</id>
    <published>2018-05-02T15:39:47.000Z</published>
    <updated>2018-05-04T00:57:39.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="glob-–-Filename-pattern-matching"><a href="#glob-–-Filename-pattern-matching" class="headerlink" title="glob – Filename pattern matching"></a>glob – Filename pattern matching</h2><h3 id="tf-gfile-Glob"><a href="#tf-gfile-Glob" class="headerlink" title="tf.gfile.Glob"></a>tf.gfile.Glob</h3><pre><code>tf.gfile.Glob(filename)</code></pre><p>Returns a list of files that match the given pattern(s).</p><p>Args:</p><ul><li>filename: string or iterable of strings. The glob pattern(s).</li></ul><p>Returns:</p><ul><li>A list of strings containing filenames that match the given pattern(s).</li></ul><p>Reference:</p><ul><li><a href="https://www.tensorflow.org/api_docs/python/tf/gfile/Glob" target="_blank" rel="noopener">https://www.tensorflow.org/api_docs/python/tf/gfile/Glob</a></li></ul><h3 id="Example-Data"><a href="#Example-Data" class="headerlink" title="Example Data"></a>Example Data</h3><p>The examples below assume the following test files are present in the current working directory:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ python glob_maketestdata.py</span><br><span class="line"></span><br><span class="line">dir</span><br><span class="line">dir/file.txt</span><br><span class="line">dir/file1.txt</span><br><span class="line">dir/file2.txt</span><br><span class="line">dir/filea.txt</span><br><span class="line">dir/fileb.txt</span><br><span class="line">dir/subdir</span><br><span class="line">dir/subdir/subfile.txt</span><br></pre></td></tr></table></figure><p>Note Use <code>glob_maketestdata.py</code> in the sample code to create these files if you want to run the examples.</p><h3 id="Wildcards"><a href="#Wildcards" class="headerlink" title="Wildcards"></a>Wildcards</h3><p>An asterisk (<code>*</code>) matches zero or more characters in a segment of a name. For example, <code>dir/*</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import glob</span><br><span class="line">for name in glob.glob(&apos;dir/*&apos;):</span><br><span class="line">    print name</span><br></pre></td></tr></table></figure><p>The pattern matches every pathname (file or directory) in the directory dir, without recursing further into subdirectories.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ python glob_asterisk.py</span><br><span class="line"></span><br><span class="line">dir/file.txt</span><br><span class="line">dir/file1.txt</span><br><span class="line">dir/file2.txt</span><br><span class="line">dir/filea.txt</span><br><span class="line">dir/fileb.txt</span><br><span class="line">dir/subdir</span><br></pre></td></tr></table></figure><p>To list files in a subdirectory, you must include the subdirectory in the pattern:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import glob</span><br><span class="line"></span><br><span class="line">print &apos;Named explicitly:&apos;</span><br><span class="line">for name in glob.glob(&apos;dir/subdir/*&apos;):</span><br><span class="line">    print &apos;\t&apos;, name</span><br><span class="line"></span><br><span class="line">print &apos;Named with wildcard:&apos;</span><br><span class="line">for name in glob.glob(&apos;dir/*/*&apos;):</span><br><span class="line">    print &apos;\t&apos;, name</span><br></pre></td></tr></table></figure><p>The first case above lists the subdirectory name explicitly, while the second case depends on a wildcard to find the directory.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python glob_subdir.py</span><br><span class="line"></span><br><span class="line">Named explicitly:</span><br><span class="line">        dir/subdir/subfile.txt</span><br><span class="line">Named with wildcard:</span><br><span class="line">        dir/subdir/subfile.txt</span><br></pre></td></tr></table></figure><p>The results, in this case, are the same. If there was another subdirectory, the wildcard would match both subdirectories and include the filenames from both.</p><h3 id="Single-Character-Wildcard"><a href="#Single-Character-Wildcard" class="headerlink" title="Single Character Wildcard"></a>Single Character Wildcard</h3><p>The other wildcard character supported is the question mark (<code>?</code>). It matches any single character in that position in the name. For example,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import glob</span><br><span class="line"></span><br><span class="line">for name in glob.glob(&apos;dir/file?.txt&apos;):</span><br><span class="line">    print name</span><br></pre></td></tr></table></figure><p>Matches all of the filenames which begin with “file”, have one more character of any type, then end with ”<code>.txt</code>”.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python glob_question.py</span><br><span class="line"></span><br><span class="line">dir/file1.txt</span><br><span class="line">dir/file2.txt</span><br><span class="line">dir/filea.txt</span><br><span class="line">dir/fileb.txt</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://pymotw.com/2/glob/" target="_blank" rel="noopener">https://pymotw.com/2/glob/</a></li></ul><h2 id="Tensorflow-slim-TF-Slim"><a href="#Tensorflow-slim-TF-Slim" class="headerlink" title="Tensorflow slim (TF-Slim)"></a>Tensorflow slim (TF-Slim)</h2><ul><li><a href="https://blog.csdn.net/mao_xiao_feng/article/details/73409975" target="_blank" rel="noopener">【Tensorflow】辅助工具篇——tensorflow slim(TF-Slim)介绍</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;glob-–-Filename-pattern-matching&quot;&gt;&lt;a href=&quot;#glob-–-Filename-pattern-matching&quot; class=&quot;headerlink&quot; title=&quot;glob – Filename pattern matc
      
    
    </summary>
    
    
      <category term="Command" scheme="http://yoursite.com/tags/Command/"/>
    
      <category term="Tensorflow" scheme="http://yoursite.com/tags/Tensorflow/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Deeplab v3+ 在cityscapes数据集上测试笔记</title>
    <link href="http://yoursite.com/2018/04/30/Deeplab-v3-training/"/>
    <id>http://yoursite.com/2018/04/30/Deeplab-v3-training/</id>
    <published>2018-04-30T22:00:46.000Z</published>
    <updated>2018-05-04T00:58:49.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ubuntu16-04下Cuda安装"><a href="#Ubuntu16-04下Cuda安装" class="headerlink" title="Ubuntu16.04下Cuda安装"></a>Ubuntu16.04下Cuda安装</h2><p>为了让tensorflow在GPU下运行，需要安装cuda和cudnn。（太懒了，不想写）</p><p>参考网页 <a href="https://blog.csdn.net/QLULIBIN/article/details/78714596" target="_blank" rel="noopener">Ubuntu 16.04 上安装 CUDA 9.0 详细教程</a></p><h2 id="DeepLab的准备、训练、测试"><a href="#DeepLab的准备、训练、测试" class="headerlink" title="DeepLab的准备、训练、测试"></a>DeepLab的准备、训练、测试</h2><h3 id="参考网页"><a href="#参考网页" class="headerlink" title="参考网页"></a>参考网页</h3><p>[1] <a href="https://github.com/tensorflow/models/tree/master/research/deeplab" target="_blank" rel="noopener">Deeplab v3 Github</a></p><p>[2] <a href="https://blog.csdn.net/qq_32799915/article/details/80070711" target="_blank" rel="noopener">图像语义分割 DeepLab v3+ 训练自己的数据集</a></p><p>[3] <a href="https://lijiancheng0614.github.io/2018/03/13/2018_03_13_TensorFlow-DeepLab/" target="_blank" rel="noopener">使用TensorFlow DeepLab进行语义分割</a></p><p>[4] <a href="https://github.com/tensorflow/models/blob/master/research/deeplab/g3doc/cityscapes.md" target="_blank" rel="noopener">Github: Running DeepLab on Cityscapes Semantic Segmentation Dataset</a></p><p>第2、3篇文章都是对voc数据集进行训练，大概参考这两篇文章，然后根据第4篇github上的instruction稍加修改，就可以训练了。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h4 id="1-测试本地环境"><a href="#1-测试本地环境" class="headerlink" title="1 测试本地环境"></a>1 测试本地环境</h4><p>首先添加slim路径，每次打开terminal都要加载路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># From tensorflow/models/research/  </span><br><span class="line">export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim</span><br></pre></td></tr></table></figure><p>Quick test by running model_test.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># From tensorflow/models/research/</span><br><span class="line">python deeplab/model_test.py</span><br></pre></td></tr></table></figure><p>Quick running the whole code on the PASCAL VOC 2012 dataset:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># From tensorflow/models/research/deeplab</span><br><span class="line">sh local_test.sh</span><br></pre></td></tr></table></figure><p>如果都运行成功，说明本地环境已经可以了，接下来训练自己的数据集。</p><h4 id="2-生成tfrecord格式的数据"><a href="#2-生成tfrecord格式的数据" class="headerlink" title="2 生成tfrecord格式的数据"></a>2 生成tfrecord格式的数据</h4><p>首先在<a href="https://github.com/mcordts/cityscapesScripts" target="_blank" rel="noopener">The Cityscapes Dataset Github</a>下载<code>Cityscapesscripts</code>，按照<code>convert_cityscapes.sh</code>文件中提到的文件放置顺序放到<code>models/research/deeplab/datasets</code>文件路径下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># The folder structure is assumed to be:</span><br><span class="line">#  + datasets</span><br><span class="line">#    - build_cityscapes_data.py</span><br><span class="line">#    - convert_cityscapes.sh</span><br><span class="line">#    + cityscapes</span><br><span class="line">#      + cityscapesscripts (downloaded scripts)</span><br><span class="line">#      + gtFine</span><br><span class="line">#      + leftImg8bit</span><br></pre></td></tr></table></figure><p>运行如下语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># From the ./models/research/deeplab/datasets directory.</span><br><span class="line">sh convert_cityscapes.sh</span><br></pre></td></tr></table></figure><p>转换后的dataset会存储在 <code>./deeplab/datasets/cityscapes/tfrecord</code>。</p><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><p>训练与测试部分主要参考文章 <a href="https://lijiancheng0614.github.io/2018/03/13/2018_03_13_TensorFlow-DeepLab/" target="_blank" rel="noopener">使用TensorFlow DeepLab进行语义分割</a></p><h4 id="0-文件结构"><a href="#0-文件结构" class="headerlink" title="0 文件结构"></a>0 文件结构</h4><p>文件结构参考 PASCAL VOC 2012 官方推荐的文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">deeplab/datasets/pascal_voc_seg</span><br><span class="line">├── exp</span><br><span class="line">│   └── train_on_train_set</span><br><span class="line">│       ├── eval</span><br><span class="line">│       │   └── events.out.tfevents....</span><br><span class="line">│       ├── export</span><br><span class="line">│       │   └── frozen_inference_graph.pb</span><br><span class="line">│       ├── train</span><br><span class="line">│       │   ├── checkpoint</span><br><span class="line">│       │   ├── events.out.tfevents....</span><br><span class="line">│       │   ├── graph.pbtxt</span><br><span class="line">│       │   ├── model.ckpt-0.data-00000-of-00001</span><br><span class="line">│       │   ├── model.ckpt-0.index</span><br><span class="line">│       │   ├── model.ckpt-0.meta</span><br><span class="line">│       │   └── ...</span><br><span class="line">│       └── vis</span><br><span class="line">│           ├── graph.pbtxt</span><br><span class="line">│           ├── raw_segmentation_results</span><br><span class="line">│           └── segmentation_results</span><br><span class="line">├── init_models</span><br><span class="line">│   └── deeplabv3_pascal_train_aug</span><br><span class="line">│       ├── frozen_inference_graph.pb</span><br><span class="line">│       ├── model.ckpt.data-00000-of-00001</span><br><span class="line">│       └── model.ckpt.index</span><br><span class="line">├── tfrecord</span><br><span class="line">│   ├── ....tfrecord</span><br><span class="line">│   └── ...</span><br><span class="line">└── VOCdevkit</span><br><span class="line">    └── VOC2012</span><br><span class="line">        ├── Annotations</span><br><span class="line">        ├── ImageSets</span><br><span class="line">        │   ├── Action</span><br><span class="line">        │   ├── Layout</span><br><span class="line">        │   ├── Main</span><br><span class="line">        │   └── Segmentation</span><br><span class="line">        ├── JPEGImages</span><br><span class="line">        ├── SegmentationClass</span><br><span class="line">        ├── SegmentationClassRaw</span><br><span class="line">        └── SegmentationObject</span><br></pre></td></tr></table></figure><p>Cityscapes 的文件结构如下，需要结合一下VOC的结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ datasets</span><br><span class="line">  + cityscapes</span><br><span class="line">    + leftImg8bit</span><br><span class="line">    + gtFine</span><br><span class="line">    + tfrecord</span><br><span class="line">    + exp</span><br><span class="line">      + train_on_train_set</span><br><span class="line">        + train</span><br><span class="line">        + eval</span><br><span class="line">        + vis</span><br></pre></td></tr></table></figure><h4 id="1-下载模型"><a href="#1-下载模型" class="headerlink" title="1 下载模型"></a>1 下载模型</h4><p>官方提供了不少预训练模型</p><p><a href="https://github.com/tensorflow/models/blob/master/research/deeplab/g3doc/model_zoo.md" target="_blank" rel="noopener">https://github.com/tensorflow/models/blob/master/research/deeplab/g3doc/model_zoo.md</a> </p><p>这里以 <code>deeplabv3_pascal_train_aug_2018_01_04</code> 为例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># From deeplab/datasets/cityscapes/</span><br><span class="line">mkdir init_models</span><br><span class="line">cd init_models</span><br><span class="line">wget http://download.tensorflow.org/models/deeplabv3_pascal_train_aug_2018_01_04.tar.gz</span><br><span class="line">tar zxf ssd_mobilenet_v1_coco_11_06_2017.tar.gz</span><br></pre></td></tr></table></figure><p>小白我是手动下载的，这里记录一下，以后也要直接用命令行。由于我是应用在cityscapes，下载的是cityscapes部分的<code>xception_65</code>。</p><h4 id="2-训练"><a href="#2-训练" class="headerlink" title="2 训练"></a>2 训练</h4><p>新建 <code>deeplab/datasets/cityscapes/exp/train_on_train_set/train.sh</code>，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p logs/</span><br><span class="line">export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim</span><br><span class="line">now=$(date +&quot;%Y%m%d_%H%M%S&quot;)</span><br><span class="line">python ../../../../train.py \</span><br><span class="line">    --logtostderr \</span><br><span class="line">    --training_number_of_steps=90000 \</span><br><span class="line">    --train_split=&quot;train&quot; \</span><br><span class="line">    --model_variant=&quot;xception_65&quot; \</span><br><span class="line">    --atrous_rates=6 \</span><br><span class="line">    --atrous_rates=12 \</span><br><span class="line">    --atrous_rates=18 \</span><br><span class="line">    --output_stride=16 \</span><br><span class="line">    --decoder_output_stride=4 \</span><br><span class="line">    --train_crop_size=769 \</span><br><span class="line">    --train_crop_size=769 \</span><br><span class="line">    --train_batch_size=4 \</span><br><span class="line">    --dataset=&quot;cityscapes&quot; \</span><br><span class="line">    --fine_tune_batch_norm=false \</span><br><span class="line">    --tf_initial_checkpoint=&quot;../../init_models/deeplabv3_cityscapes_train/model.ckpt&quot; \</span><br><span class="line">    --train_logdir=&quot;train/&quot; \</span><br><span class="line">    --dataset_dir=&quot;../../tfrecord/&quot; 2&gt;&amp;1 | tee logs/train_$now.txt &amp;</span><br></pre></td></tr></table></figure><p>进入 <code>deeplab/datasets/cityscapes/exp/train_on_train_set/</code>，</p><p>运行 <code>sh train.sh</code> 即可训练。</p><h4 id="3-验证"><a href="#3-验证" class="headerlink" title="3 验证"></a>3 验证</h4><p>可一边训练一边验证，注意使用其它的GPU或合理分配显存。</p><p>新建 <code>deeplab/datasets/cityscapes/exp/train_on_train_set/eval.sh</code>，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">python ../../../../eval.py \</span><br><span class="line">    --logtostderr \</span><br><span class="line">    --eval_split=&quot;val&quot; \</span><br><span class="line">    --model_variant=&quot;xception_65&quot; \</span><br><span class="line">    --atrous_rates=6 \</span><br><span class="line">    --atrous_rates=12 \</span><br><span class="line">    --atrous_rates=18 \</span><br><span class="line">    --output_stride=16 \</span><br><span class="line">    --decoder_output_stride=4 \</span><br><span class="line">    --eval_crop_size=1025 \</span><br><span class="line">    --eval_crop_size=2049 \</span><br><span class="line">    --dataset=&quot;cityscapes&quot; \</span><br><span class="line">    --checkpoint_dir=&quot;train/&quot; \</span><br><span class="line">    --eval_logdir=&quot;eval/&quot; \</span><br><span class="line">    --dataset_dir=&quot;../../tfrecord/&quot; &amp;</span><br><span class="line">    # --max_number_of_evaluations=1 &amp;</span><br></pre></td></tr></table></figure><p>进入 <code>deeplab/datasets/cityscapes/exp/train_on_train_set/</code>，</p><p>运行 <code>CUDA_VISIBLE_DEVICES=&quot;1&quot; sh eval.sh</code> 即可验证（这里指定了第二个 GPU）。</p><h4 id="4-可视化-log"><a href="#4-可视化-log" class="headerlink" title="4 可视化 log"></a>4 可视化 log</h4><p>可一边训练一边可视化训练的 log，访问 <a href="http://localhost:6006/" target="_blank" rel="noopener">http://localhost:6006/</a> 即可看到 loss 等的变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># From deeplab/datasets/cityscapes/exp/train_on_train_set</span><br><span class="line">tensorboard --logdir train/</span><br></pre></td></tr></table></figure><p>可视化验证的 log，可看到 miou_1.0 的变化，这里指定了另一个端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># From deeplab/datasets/cityscapes/exp/train_on_train_set</span><br><span class="line">tensorboard --logdir eval/ --port 6007</span><br></pre></td></tr></table></figure><p>或同时可视化训练与验证的log：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># From deeplab/datasets/cityscapes/exp/train_on_train_set</span><br><span class="line">tensorboard --logdir .</span><br></pre></td></tr></table></figure><h4 id="5-可视化分割结果"><a href="#5-可视化分割结果" class="headerlink" title="5 可视化分割结果"></a>5 可视化分割结果</h4><p>可一边训练一边可视化分割结果。</p><p>新建 <code>deeplab/datasets/cityscapes/exp/train_on_train_set/vis.sh</code>，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">python ../../../../vis.py \</span><br><span class="line">    --logtostderr \</span><br><span class="line">    --vis_split=&quot;val&quot; \</span><br><span class="line">    --model_variant=&quot;xception_65&quot; \</span><br><span class="line">    --atrous_rates=6 \</span><br><span class="line">    --atrous_rates=12 \</span><br><span class="line">    --atrous_rates=18 \</span><br><span class="line">    --output_stride=16 \</span><br><span class="line">    --decoder_output_stride=4 \</span><br><span class="line">    --vis_crop_size=1025 \</span><br><span class="line">    --vis_crop_size=2049 \</span><br><span class="line">    --dataset=&quot;cityscapes&quot; \</span><br><span class="line">    --colormap_type=&quot;cityscapes&quot; \</span><br><span class="line">    --checkpoint_dir=&quot;train/&quot; \</span><br><span class="line">    --vis_logdir=&quot;vis/&quot; \</span><br><span class="line">    --dataset_dir=&quot;../../tfrecord/&quot; &amp;</span><br></pre></td></tr></table></figure><p>进入 <code>deeplab/datasets/cityscapes/exp/train_on_train_set/</code>，</p><p>运行 <code>sh vis.sh</code> 即可生成分割结果，<code>vis/segmentation_results/</code> 里有彩色化的分割结果，<code>vis/raw_segmentation_results/</code> 里有原始的分割结果。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="1-导出模型"><a href="#1-导出模型" class="headerlink" title="1 导出模型"></a>1 导出模型</h4><p>训练完成后得到一些 checkpoint 文件在 <code>deeplab/datasets/cityscapes/exp/train_on_train_set/train/</code> 中，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph.pbtxt</span><br><span class="line">model.ckpt-1000.data-00000-of-00001</span><br><span class="line">model.ckpt-1000.info</span><br><span class="line">model.ckpt-1000.meta</span><br></pre></td></tr></table></figure><p>其中 meta 文件保存了 graph 和 metadata，ckpt 文件保存了网络的 weights。</p><p>而进行预测时只需模型和权重，不需要 metadata，故可使用官方提供的脚本生成推导图。</p><p>新建 <code>deeplab/datasets/cityscapes/exp/train_on_train_set/export_model.sh</code>，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">python ../../../../export_model.py \</span><br><span class="line">    --logtostderr \</span><br><span class="line">    --checkpoint_path=&quot;train/model.ckpt-$1&quot; \</span><br><span class="line">    --export_path=&quot;export/frozen_inference_graph-$1.pb&quot; \</span><br><span class="line">    --model_variant=&quot;xception_65&quot; \</span><br><span class="line">    --atrous_rates=6 \</span><br><span class="line">    --atrous_rates=12 \</span><br><span class="line">    --atrous_rates=18 \</span><br><span class="line">    --output_stride=16 \</span><br><span class="line">    --decoder_output_stride=4 \</span><br><span class="line">    --num_classes=19 \</span><br><span class="line">    --crop_size=769 \</span><br><span class="line">    --crop_size=769 \</span><br><span class="line">    --inference_scales=1.0</span><br></pre></td></tr></table></figure><p>进入 <code>deeplab/datasets/pascal_voc_seg/exp/train_on_train_set/</code>，</p><p>运行 <code>sh export_model.sh 1000</code> 即可导出模型 <code>export/frozen_inference_graph-1000.pb</code>。</p><h4 id="2-测试图片"><a href="#2-测试图片" class="headerlink" title="2 测试图片"></a>2 测试图片</h4><p>运行 <code>deeplab_demo.ipynb</code> 并修改其中的各种路径即可。</p><p>或自写 <code>inference</code> 脚本，如 <code>deeplab/datasets/cityscapes/exp/train_on_train_set/infer.py</code>。（不太确定label 0是不是background，待更）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.path.append(&apos;../../../../utils/&apos;)</span><br><span class="line">from matplotlib import pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">from PIL import Image</span><br><span class="line">import tensorflow as tf</span><br><span class="line">import get_dataset_colormap</span><br><span class="line">LABEL_NAMES = np.asarray([</span><br><span class="line">    &apos;unlabeled&apos;, &apos;road&apos;, &apos;sidewalk&apos;, &apos;building&apos;, &apos;wall&apos;, &apos;fence&apos;, &apos;pole&apos;,</span><br><span class="line">    &apos;traffic light&apos;, &apos;traffic sign&apos;, &apos;vegetation&apos;, &apos;terrain&apos;, &apos;person&apos;, &apos;rider&apos;, &apos;car&apos;, &apos;truck&apos;,</span><br><span class="line">    &apos;bus&apos;, &apos;train&apos;, &apos;motorcycle&apos;, &apos;bicycle&apos;</span><br><span class="line">])</span><br><span class="line">FULL_LABEL_MAP = np.arange(len(LABEL_NAMES)).reshape(len(LABEL_NAMES), 1)</span><br><span class="line">FULL_COLOR_MAP = get_dataset_colormap.label_to_color_image(FULL_LABEL_MAP)</span><br><span class="line">class DeepLabModel(object):</span><br><span class="line">    &quot;&quot;&quot;Class to load deeplab model and run inference.&quot;&quot;&quot;</span><br><span class="line">    INPUT_TENSOR_NAME = &apos;ImageTensor:0&apos;</span><br><span class="line">    OUTPUT_TENSOR_NAME = &apos;SemanticPredictions:0&apos;</span><br><span class="line">    INPUT_SIZE = 769</span><br><span class="line">    def __init__(self, model_path):</span><br><span class="line">        &quot;&quot;&quot;Creates and loads pretrained deeplab model.&quot;&quot;&quot;</span><br><span class="line">        self.graph = tf.Graph()</span><br><span class="line">        with open(model_path) as fd:</span><br><span class="line">            graph_def = tf.GraphDef.FromString(fd.read())</span><br><span class="line">        with self.graph.as_default():</span><br><span class="line">            tf.import_graph_def(graph_def, name=&apos;&apos;)</span><br><span class="line">        self.sess = tf.Session(graph=self.graph)</span><br><span class="line">    def run(self, image):</span><br><span class="line">        &quot;&quot;&quot;Runs inference on a single image.</span><br><span class="line">        Args:</span><br><span class="line">            image: A PIL.Image object, raw input image.</span><br><span class="line">        Returns:</span><br><span class="line">            resized_image: RGB image resized from original input image.</span><br><span class="line">            seg_map: Segmentation map of `resized_image`.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        width, height = image.size</span><br><span class="line">        resize_ratio = 1.0 * self.INPUT_SIZE / max(width, height)</span><br><span class="line">        target_size = (int(resize_ratio * width), int(resize_ratio * height))</span><br><span class="line">        resized_image = image.convert(&apos;RGB&apos;).resize(target_size,</span><br><span class="line">                                                    Image.ANTIALIAS)</span><br><span class="line">        batch_seg_map = self.sess.run(</span><br><span class="line">            self.OUTPUT_TENSOR_NAME,</span><br><span class="line">            feed_dict=&#123;</span><br><span class="line">                self.INPUT_TENSOR_NAME: [np.asarray(resized_image)]</span><br><span class="line">            &#125;)</span><br><span class="line">        seg_map = batch_seg_map[0]</span><br><span class="line">        return resized_image, seg_map</span><br><span class="line">def vis_segmentation(image, seg_map):</span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.subplot(221)</span><br><span class="line">    plt.imshow(image)</span><br><span class="line">    plt.axis(&apos;off&apos;)</span><br><span class="line">    plt.title(&apos;input image&apos;)</span><br><span class="line">    plt.subplot(222)</span><br><span class="line">    seg_image = get_dataset_colormap.label_to_color_image(</span><br><span class="line">        seg_map, get_dataset_colormap.get_pascal_name()).astype(np.uint8)</span><br><span class="line">    plt.imshow(seg_image)</span><br><span class="line">    plt.axis(&apos;off&apos;)</span><br><span class="line">    plt.title(&apos;segmentation map&apos;)</span><br><span class="line">    plt.subplot(223)</span><br><span class="line">    plt.imshow(image)</span><br><span class="line">    plt.imshow(seg_image, alpha=0.7)</span><br><span class="line">    plt.axis(&apos;off&apos;)</span><br><span class="line">    plt.title(&apos;segmentation overlay&apos;)</span><br><span class="line">    unique_labels = np.unique(seg_map)</span><br><span class="line">    ax = plt.subplot(224)</span><br><span class="line">    plt.imshow(</span><br><span class="line">        FULL_COLOR_MAP[unique_labels].astype(np.uint8),</span><br><span class="line">        interpolation=&apos;nearest&apos;)</span><br><span class="line">    ax.yaxis.tick_right()</span><br><span class="line">    plt.yticks(range(len(unique_labels)), LABEL_NAMES[unique_labels])</span><br><span class="line">    plt.xticks([], [])</span><br><span class="line">    ax.tick_params(width=0)</span><br><span class="line">    plt.show()</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    if len(sys.argv) &lt; 3:</span><br><span class="line">        print(&apos;Usage: python &#123;&#125; image_path model_path&apos;.format(sys.argv[0]))</span><br><span class="line">        exit()</span><br><span class="line">    image_path = sys.argv[1]</span><br><span class="line">    model_path = sys.argv[2]</span><br><span class="line">    model = DeepLabModel(model_path)</span><br><span class="line">    orignal_im = Image.open(image_path)</span><br><span class="line">    resized_im, seg_map = model.run(orignal_im)</span><br><span class="line">    vis_segmentation(resized_im, seg_map)</span><br></pre></td></tr></table></figure><p>运行以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># From deeplab/datasets/cityscapes/exp/train_on_train_set/</span><br><span class="line">python infer.py \</span><br><span class="line">    ../../../../g3doc/img/image1.jpg \</span><br><span class="line">    export/frozen_inference_graph.pb</span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>小白入门deeplab，遇到好多傻问题，记录一下。</p><h4 id="1-Import-error"><a href="#1-Import-error" class="headerlink" title="1 Import error"></a>1 Import error</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImportError: No module named deeplab</span><br></pre></td></tr></table></figure><p>在<code>models/research/</code>路径下输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim</span><br></pre></td></tr></table></figure><h4 id="2-InvalidArgumentError"><a href="#2-InvalidArgumentError" class="headerlink" title="2 InvalidArgumentError"></a>2 InvalidArgumentError</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InvalidArgumentError (see above for traceback): Assign requires shapes of both tensors to match. lhs shape= [21] rhs shape= [19]</span><br></pre></td></tr></table></figure><p>这是因为最后的<code>num_classes</code>和    <code>init model</code>的<code>num_classes</code>不一致导致的。我这里是因为忘记把dataset改成cityscapes了。因为在<code>segmenation_dataset.py</code>里面voc的<code>num_classes</code>是21，我的<code>init model</code>的<code>num_classes</code>是cityscapes的，是19，所以会不match。</p><p>在写<code>train.sh</code>文件的时候，加入下面这一行就解决了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--dataset=&quot;cityscapes&quot; \</span><br></pre></td></tr></table></figure><h4 id="3-Linux终止脚本进程"><a href="#3-Linux终止脚本进程" class="headerlink" title="3 Linux终止脚本进程"></a>3 Linux终止脚本进程</h4><p>当<code>ctrl+C</code>没有用时，可以用<code>ps -ef | grep 进程名</code> 查出进程，然后kill该进程。</p><p>kill 的用法：<code>kill［信号代码］进程ID</code></p><p>注：信号代码可以省略；我们常用的信号代码是 -9 ，表示强制终止；</p><p><img src="/2018/04/30/Deeplab-v3-training/kill.png" alt="kill"></p><p>参考网页 <a href="https://blog.csdn.net/LY_Dengle/article/details/53997450" target="_blank" rel="noopener">linux停止正在执行脚本</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ubuntu16-04下Cuda安装&quot;&gt;&lt;a href=&quot;#Ubuntu16-04下Cuda安装&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu16.04下Cuda安装&quot;&gt;&lt;/a&gt;Ubuntu16.04下Cuda安装&lt;/h2&gt;&lt;p&gt;为了让ten
      
    
    </summary>
    
    
      <category term="Cityscapes" scheme="http://yoursite.com/tags/Cityscapes/"/>
    
      <category term="Deeplab v3+" scheme="http://yoursite.com/tags/Deeplab-v3/"/>
    
      <category term="train" scheme="http://yoursite.com/tags/train/"/>
    
  </entry>
  
  <entry>
    <title>Cityscapes Dataset</title>
    <link href="http://yoursite.com/2018/04/30/Cityscapes-Dataset/"/>
    <id>http://yoursite.com/2018/04/30/Cityscapes-Dataset/</id>
    <published>2018-04-30T18:08:22.000Z</published>
    <updated>2018-05-04T00:59:13.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cityscapes-Dataset"><a href="#Cityscapes-Dataset" class="headerlink" title="Cityscapes Dataset"></a>Cityscapes Dataset</h2><p>该github库包含用于检查，准备和评估Cityscapes数据集的脚本。 该大型数据集包含来自50个不同城市的街道场景中记录的多种立体视频序列，除了20000个弱注释帧以外，还包含5000帧高质量像素级注释。</p><p>详细信息和下载链接请登录：<a href="www.cityscapes-dataset.net">www.cityscapes-dataset.net</a></p><p>数据库介绍英文网址：<a href="https://github.com/mcordts/cityscapesScripts" target="_blank" rel="noopener">https://github.com/mcordts/cityscapesScripts</a></p><p>以下翻译均来自：<a href="https://blog.csdn.net/chishuideyu/article/details/79963072" target="_blank" rel="noopener">https://blog.csdn.net/chishuideyu/article/details/79963072</a></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>Cityscapes dataset 的文件夹结构如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;root&#125;/&#123;type&#125;&#123;video&#125;/&#123;split&#125;/&#123;city&#125;/&#123;city&#125;_&#123;seq:0&gt;6&#125;_&#123;frame:0&gt;6&#125;_&#123;type&#125;&#123;ext&#125;</span><br></pre></td></tr></table></figure><p>其中独立元素的含义是:</p><ul><li><p><code>root Cityscapes</code>数据集的根文件夹。 我们的许多脚本检查指向该文件夹的环境变量“CITYSCAPES_DATASET”是否存在，并将其作为默认目录。</p></li><li><p><code>type</code> 数据类型或形态，比如 <code>gtFine</code> 代表精细的GroundTruth， <code>leftImg8bit</code> 代表左侧相机的八位图像。</p></li><li><p><code>split</code> 分割，即 train， val， test， train_extra或demoVideo。 请注意，并非所有分组都存在所有类型的数据。 因此，偶尔找到空文件夹不要感到惊讶。</p></li><li><p><code>city</code> 这部分数据集的所属城市。</p></li><li><p><code>seq</code> 序列号，使用6位数字。</p></li><li><p><code>frame</code> 帧号，使用6位数字。 请注意，在一些城市中，虽然记录了非常长的序列，但在一些城市记录了许多短序列，其中仅记录了第19帧.</p></li><li><p><code>ext</code> 该文件的扩展名和可选的后缀，例如， <code>_polygons.json</code>为GroundTruth文件</p></li></ul><p><code>type</code>可能的值</p><ul><li><p><code>gtFine</code> 精细注释，2975张训练图，500张验证图和1525张测试图。 这种类型的注释用于验证，测试和可选的训练。 注解使用包含单个多边形的“json”文件进行编码。 另外，我们提供<code>png</code>图像，其中像素值对标签进行编码。 有关详细信息，请参阅<code>helpers / labels.py</code>和<code>prepare</code>中的脚本。</p></li><li><p><code>gtCoarse</code> 粗略注释，可用于所有训练和验证图像以及另一组19998张训练图像（<code>train_extra</code>）。 这些注释可以用于训练，也可以与<code>gtFine</code>一起使用，也可以在弱监督的环境中单独使用。</p></li><li><p><code>gtBboxCityPersons</code> 行人边界框注释，可用于所有训练和验证图像。 有关更多详细信息，请参阅<code>helpers / labels_cityPersons.py</code>以及<a href="https://bitbucket.org/shanshanzhang/citypersons" target="_blank" rel="noopener"><code>CityPersons</code>出版物（Zhang等，CVPR’17）</a>。</p></li><li><p><code>leftImg8bit</code> 左侧图像，采用8位LDR格式。这些图像都有标准的注释.</p></li><li><p><code>leftImg16bit</code> 左侧图像，采用16位HDR格式。这些图像提供每像素16位色彩深度并包含更多信息，特别是在场景的非常黑暗或明亮的部分。 警告：图像存储为16位PNG，这是非标准的，并且不是所有库都支持。</p></li><li><p><code>rightImg8bit</code> 右侧图像，采用8位LDR格式。</p></li><li><p><code>rightImg16bit</code> 右侧图像，采用16位HDR格式。</p></li><li><p><code>timestamp</code> 记录时间，单位是<code>ns</code>。 每个序列的第一帧总是有一个0的时间戳。</p></li><li><p><code>disparity</code> 预先计算的视差深度图。 为了获得视差值，对于p&gt; 0的每个像素p计算：<code>d =（float（p）-1）/ 256</code>，而值p = 0是无效测量。 警告：图像存储为16位PNG，这是非标准的，并且不是所有库都支持。</p></li><li><p><code>camera</code> 内部和外部相机校准。</p></li><li><p><code>vehicle</code> 车辆测距，GPS坐标和室外温度。</p></li></ul><p>随着时间的推移可能会增加更多类型，并且并非所有类型都是最初可用的，如果您需要其他元数据来运行您的方法，请告诉我们。</p><p><code>split</code>可能出现的值</p><ul><li><p><code>train</code> 通常用于训练, 包含 2975 张带有粗糙或精细标注的图像</p></li><li><p><code>val</code> 应该用于验证<code>hyper-parameters</code>，包含500个具有精细和粗糙注释的图像。 也可以用于训练.</p></li><li><p><code>test</code> 用于在我们的评估服务器上测试。 注释不公开，但为方便起见，我们包含自我车辆和整改边界的注释。</p></li><li><p><code>train_extra</code> 可以选择性地用于训练，包含带有粗略注释的19998张图像</p></li><li><p><code>demoVideo</code> 可用于定性评估的视频序列，这些视频不提供注释</p></li></ul><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>在名为 <code>scripts</code>的文件夹中有数据集包含几个脚本</p><ul><li><p><code>helpers</code> 被其他脚本文件调用的帮助文件</p></li><li><p><code>viewer</code> 用于查看图像和标注的脚本</p></li><li><p><code>preparation</code> 用于将<code>GroundTruth</code>注释转换为适合您的方法的格式的脚本</p></li><li><p><code>evaluation</code> 评价你的方法的脚本</p></li><li><p><code>annotation</code> 被用来标注数据集的标注工具</p></li></ul><p>请注意，所有文件顶部都有一个小型documentation。 非常重要</p><ul><li><p><code>helpers/labels.py</code> 定义所有语义类ID的中心文件，并提供各种类属性之间的映射。</p></li><li><p><code>helpers/labels_cityPersons.py</code> 文件定义所有CityPersons行人类的ID并提供各种类属性之间的映射。</p></li><li><p><code>viewer/cityscapesViewer.py</code> 查看图像并覆盖注释。</p></li><li><p><code>preparation/createTrainIdLabelImgs.py</code> 将多边形格式的注释转换为带有标签ID的png图像，其中像素编码可以在“labels.py”中定义的“训练ID”。</p></li><li><p><code>preparation/createTrainIdInstanceImgs.py</code> 将多边形格式的注释转换为带有实例ID的png图像，其中像素编码由“train ID”组成的实例ID。</p></li><li><p><code>evaluation/evalPixelLevelSemanticLabeling.py</code> 该脚本来评估验证集上的像素级语义标签结果。该脚本还用于评估测试集的结果。</p></li><li><p><code>evaluation/evalInstanceLevelSemanticLabeling.py</code> 该脚本来评估验证集上的实例级语义标签结果。该脚本还用于评估测试集的结果。</p></li><li><p><code>setup.py</code> 运行 <code>setup.py build_ext --inplace</code> 启用<code>cython</code>插件以进行更快速的评估。仅针对<code>Ubuntu</code>进行了测试。</p></li></ul><p>脚本可以通过 pip安装，如下： </p><pre><code>sudo pip install </code></pre><p>这将脚本安装为名为<code>cityscapesscripts</code>的python模块并公开以下工具，请参阅上面的说明：</p><ul><li>csViewer</li><li>csLabelTool</li><li>csEvalPixelLevelSemanticLabeling</li><li>csEvalInstanceLevelSemanticLabeling</li><li>csCreateTrainIdLabelImgs</li><li>csCreateTrainIdInstanceImgs</li></ul><p>请注意，对于您需要安装的图形工具: </p><pre><code>sudo apt install python-tk python-qt4</code></pre><h2 id="测评"><a href="#测评" class="headerlink" title="测评"></a>测评</h2><p>一旦你想在测试集上测试你的方法，请在你提供的测试图像上运行你的方法并提交你的结果：</p><p><code>www.cityscapes-dataset.net/submit/</code></p><p>对于语义标注，我们要求结果格式与我们的名为<code>labelIDs</code>的标签图像的格式相匹配。<br>因此，您的代码应该生成图像，其中每个像素的值与<code>labels.py</code>中定义的类ID相对应。<br>请注意，我们的评估脚本包含在脚本文件夹中，可用于在验证集上测试您的方法。<br>有关提交过程的更多详细信息，请咨询我们的网站。</p><h2 id="Dataset-Overview"><a href="#Dataset-Overview" class="headerlink" title="Dataset Overview"></a>Dataset Overview</h2><p>The Cityscapes Dataset focuses on semantic understanding of urban street scenes. In the following, we give an overview on the design choices that were made to target the dataset’s focus.</p><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><p>Type of annotations</p><ul><li>Semantic</li><li>Instance-wise</li><li>Dense pixel annotations</li></ul><p>Complexity</p><ul><li>30 classes</li></ul><p>Volume</p><ul><li>5 000 annotated images with fine annotations </li><li>20 000 annotated images with coarse annotations </li></ul><p>Metadata</p><ul><li>Preceding and trailing video frames. Each annotated image is the 20th image from a 30 frame video snippets (1.8s)</li><li>Corresponding right stereo views</li><li>GPS coordinates</li><li>Ego-motion data from vehicle odometry</li><li>Outside temperature from vehicle sensor</li></ul><p>Benchmark suite and evaluation server</p><ul><li>Pixel-level semantic labeling</li><li>Instance-level semantic labeling</li></ul><h3 id="Class-Definitions"><a href="#Class-Definitions" class="headerlink" title="Class Definitions"></a>Class Definitions</h3><p>Please click on the individual classes for details on their definitions.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GroupClasses</span><br><span class="line">flatroad · sidewalk · parking+ · rail track+</span><br><span class="line">humanperson* · rider*</span><br><span class="line">vehiclecar* · truck* · bus* · on rails* · motorcycle* · bicycle* · caravan*+ · trailer*+</span><br><span class="line">constructionbuilding · wall · fence · guard rail+ · bridge+ · tunnel+</span><br><span class="line">objectpole · pole group+ · traffic sign · traffic light</span><br><span class="line">naturevegetation · terrain</span><br><span class="line">skysky</span><br><span class="line">voidground+ · dynamic+ · static+</span><br></pre></td></tr></table></figure><p><code>*</code> Single instance annotations are available. However, if the boundary between such instances cannot be clearly seen, the whole crowd/group is labeled together and annotated as group, e.g. car group.</p><p><code>+</code> This label is not included in any evaluation and treated as void (or in the case of license plate as the vehicle mounted on).</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://www.cityscapes-dataset.com/dataset-overview/" target="_blank" rel="noopener">https://www.cityscapes-dataset.com/dataset-overview/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Cityscapes-Dataset&quot;&gt;&lt;a href=&quot;#Cityscapes-Dataset&quot; class=&quot;headerlink&quot; title=&quot;Cityscapes Dataset&quot;&gt;&lt;/a&gt;Cityscapes Dataset&lt;/h2&gt;&lt;p&gt;该githu
      
    
    </summary>
    
    
      <category term="Cityscapes" scheme="http://yoursite.com/tags/Cityscapes/"/>
    
      <category term="Dataset" scheme="http://yoursite.com/tags/Dataset/"/>
    
  </entry>
  
  <entry>
    <title>How do I build my own blog with Hexo and Github</title>
    <link href="http://yoursite.com/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/"/>
    <id>http://yoursite.com/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/</id>
    <published>2018-04-11T18:01:04.000Z</published>
    <updated>2018-04-11T23:21:59.227Z</updated>
    
    <content type="html"><![CDATA[<p>昨晚熬夜终于搭好了一个属于自己的博客，但是对markdown语法还不是很熟悉，于是决定写一篇搭博客的教程来熟悉一下。前人掉坑，后人绕行。那么，废话不多说，就开始吧！:)</p><p>本文主要是针对 <strong>Mac OS</strong> 系统上基于 <strong>Github</strong> 和 <strong>Hexo</strong> 的博客搭建，<strong>Windows</strong> 系统上的搭建过程类似，但是会略有不同，可以作为参考。</p><h2 id="Github-和-SSH-设置"><a href="#Github-和-SSH-设置" class="headerlink" title="Github 和 SSH 设置"></a>Github 和 SSH 设置</h2><p>博客搭建的大概思路就是用 <strong>Github</strong> 获得免费的域名和空间，然后使用搭建博客的模版 <strong>Hexo</strong> 来让博客更好看。</p><h3 id="注册-Github"><a href="#注册-Github" class="headerlink" title="注册 Github"></a>注册 Github</h3><p>首先去 <a href="https://github.com/" target="_blank" rel="noopener">Github</a> 上注册你的username，建议使用常用邮箱，Github上很多通知都是通过邮箱的。比如你的主页上传并构建成功会通过邮箱通知，更重要的是，如果构建失败的话也会在邮件中说明原因。</p><h3 id="本地SSH-Keys的设置"><a href="#本地SSH-Keys的设置" class="headerlink" title="本地SSH Keys的设置"></a>本地SSH Keys的设置</h3><p>我们需要通过SSH来让本地编辑的内容托管到Github，所以要对先SSH进行设置。</p><p>首先检查电脑上现有的SSH Keys，在Terminal输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh</span><br></pre></td></tr></table></figure><p>输入 <code>ls</code> 查看是否有ssh keys。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br></pre></td></tr></table></figure><p>如果只显示一个 <code>known_hosts</code> ，说明没有ssh keys，可以跳过这一步，否则需要备份和移除原来的SSH Keys (因为我之前没有SSH Keys，所以我没有用到这一步)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ config  id_rsa  id_rsa.pub  known_hosts</span><br><span class="line">$ mkdir key_backup</span><br><span class="line">$ cp id_rsa* key_backup</span><br><span class="line">$ rm id_rsa*</span><br></pre></td></tr></table></figure><p>输入以下代码形成新的SSH Key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，回车就好。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C “your-email”</span><br><span class="line"></span><br><span class="line">显示：</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</span><br></pre></td></tr></table></figure><p>上面代码中的 “your-email” 就是你在学习Git时，你自己设置的Git用户名时给出的email地址 ( 我的话，使用的是注册github的email )。</p><p>然后系统会要你输入加密串（Passphrase）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;</span><br><span class="line">Enter same passphrase again:&lt;再次输入加密串&gt;</span><br></pre></td></tr></table></figure><p>最后看到SSH Key success，就成功设置SSH Key了。</p><h3 id="添加SSH-Key到GitHub"><a href="#添加SSH-Key到GitHub" class="headerlink" title="添加SSH Key到GitHub"></a>添加SSH Key到GitHub</h3><p>在本机设置SSH Key之后，需要添加到 GitHub 上，以完成SSH链接的设置。输入下面代码打开SSH文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open ~/.ssh</span><br></pre></td></tr></table></figure><p>用文本编辑工具打开 <strong>id_rsa.pub</strong> 文件。</p><p>登录Github，点击右侧自己的头像，选择 <strong>“setting”</strong> 。</p><p><img src="/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/githubSet.png" alt="Gihub Setting"></p><p>选择右侧的 <strong>“SSH and GPG Keys”</strong> 项，把 <strong>id_rsa.pub</strong> 文件中的内容复制到如下位置，然后点击 <strong>Add Key</strong> 按钮即可。</p><p><img src="/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/sshKey.jpg" alt="SSH Key"></p><p>PS：如果需要配置多个GitHub账号，可以参看这个 <a href="http://ju.outofmemory.cn/entry/16775" target="_blank" rel="noopener">多个github帐号的SSH key切换</a>，不过需要提醒一下的是，如果你只是通过这篇文章中所述配置了Host，那么你多个账号下面的提交用户会是一个人，所以需要通过命令git config –global –unset user.email删除用户账户设置，在每一个repo下面使用git config –local user.email ‘你的github邮箱@mail.com’命令单独设置用户账户信息。 （原po写的这个没看懂QAQ，反正暂时用不到，呼～）</p><p>可以输入下面的命令，看看设置是否成功，<a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>` 的部分不要修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果是下面的反应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>不要紧张，输入yes就好，然后会看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi &lt;em&gt;username&lt;/em&gt;! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><h3 id="设置你的账号信息"><a href="#设置你的账号信息" class="headerlink" title="设置你的账号信息"></a>设置你的账号信息</h3><p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。</p><p>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;你的名字&quot;</span><br><span class="line">$ git config --global user.email &quot;your_email@youremail.com&quot;</span><br></pre></td></tr></table></figure><p>好了，你已经可以成功连接GitHub了。</p><h2 id="基于Hexo搭建博客"><a href="#基于Hexo搭建博客" class="headerlink" title="基于Hexo搭建博客"></a>基于Hexo搭建博客</h2><h3 id="创建项目仓库"><a href="#创建项目仓库" class="headerlink" title="创建项目仓库"></a>创建项目仓库</h3><p>点击Github页面右上角的“+”的符号，选择 <strong>“New repository”</strong> ,然后在 <strong>“Repository name”</strong> 输入框里面填写 <code>username.github.io</code>，这里 “username” 是 Github 账号名。例如，下图中就是 <code>suncrazy.github.io</code>。</p><p><img src="/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/repoName.jpg" alt="Repo Name"></p><p>然后其他的地方都是默认即可，点击 <strong>“Create repository”</strong> 即可创建成功。到目前为止，github部分的内容就完成了。</p><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><p>接下来需要配置和使用Github，需要用到Git。Mac OS X 中自带Git，不需要安装，在Terminal中输入以下命令可以查看Git版本号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br></pre></td></tr></table></figure><h3 id="安装-Nodes-js"><a href="#安装-Nodes-js" class="headerlink" title="安装 Nodes.js"></a>安装 Nodes.js</h3><p>从 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Nodes官网</a> 下载并安装 Nodes.js。<br>Node.js 安装完成以后，npm 也被安装完成，简化了工作。检测安装是否成功，可以在 Mac Terminal 中输入以下命令查看 Node.js 和 npm 的版本号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>Git、Node.js 和 npm 安装完成以后，接下来就可以安装 Hexo 了。在 Mac Terminal 中输入以下命令即可执行安装（可能需要输入电脑密码）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install hexo -g</span><br></pre></td></tr></table></figure><p>安装完成后，输入以下命令查看Hexo版本号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure><h3 id="初始化-Hexo-和-Git"><a href="#初始化-Hexo-和-Git" class="headerlink" title="初始化 Hexo 和 Git"></a>初始化 Hexo 和 Git</h3><p>在根目录下，用以下语句新建一个文件夹，例如“blogGithub”，这个文件夹将是你的博客的根目录，以后与博客有关的所有文件都是存放在这里。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd</span><br><span class="line">$ mkdir blogGithub</span><br></pre></td></tr></table></figure><p>进入你新建的这个文件夹，执行Hexo初始化以及Git初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd blogGithub</span><br><span class="line">$ hexo init</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>这个时候，你会发现在 “～/blogGithub” 中多了很多文件夹。</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>在部署博客之前，需要先安装依赖，执行以下命令即可（可能需要输入电脑密码）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install</span><br></pre></td></tr></table></figure><h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><p>执行以下命令，生成静态页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>执行以下命令，启动服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>Terminal 界面如图所示。</p><p><img src="/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/hexoServer.png" alt="Hexo Server"></p><p>打开浏览器，输入 <code>http://localhost:4000/</code> ，如下图所示。</p><p><img src="/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/hexoPage.jpg" alt="Hexo Page"></p><p>这就是你的博客的界面，其中显示的内容是默认的内容，你可以随意修改。</p><p>回到Terminal界面，使用 <code>Ctrl+C</code> 停止服务。</p><h3 id="博客上传"><a href="#博客上传" class="headerlink" title="博客上传"></a>博客上传</h3><p>将博客内容上传到Github，需要安装Git部署器，执行以下命令安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装完成之后，利用文本编辑器打开 hexo 目录 (这里是 “～/blogGithub” ) 中的 “_config.yml” 文件，在文件最末尾，修改如下配置：</p><p><img src="/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/config.png" alt="Config"></p><p>其中，”username” 是Github账户名。</p><p>在 Hexo 目录 (这里是 “～/blogGithub” ) 下执行以下命令， 即可完成对将静态博客部署到 GitHub 上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>部署成功以后，在浏览器中输入 <code>http://username.github.io</code> 即可在线浏览自己的博客啦~</p><h2 id="创建新博客"><a href="#创建新博客" class="headerlink" title="创建新博客"></a>创建新博客</h2><p>以下命令均在 Hexo 目录 (这里是 “～/blogGithub” ) 下执行。</p><h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><p>新建博客，执行以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;text_blog&quot;</span><br></pre></td></tr></table></figure><p> 在 <code>/hexo/source/_posts/</code> 目录下即可看到一个名为 <code>test-blog.md</code> 文件，打开写入自己的博客内容。</p><h3 id="编写博客"><a href="#编写博客" class="headerlink" title="编写博客"></a>编写博客</h3><p>Mac 下可以考虑下载和安装 <a href="https://macdown.uranusjr.com/" target="_blank" rel="noopener">MacDown</a> 进行博客编写。博客编写使用 <a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown</a> 进行编写，在 MacDown 中，自带 help 文件，怎么写说得很详细，也可以参考 <a href="https://www.jianshu.com/p/148e26058916" target="_blank" rel="noopener">MacDown的使用规范总结</a> 。</p><p>在 Hexo 中，空格很重要，比如一级标题显示需要写成 <code># 一级标题</code> ，写成 <code>#一级标题</code> 就无法显示成一级标题。另外，为了方便插入图片，需要在 Hexo 目录下的 “_config.yml” 配置文件中，找到这个配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: false</span><br></pre></td></tr></table></figure><p>把这里的false改为true，开启hexo的媒体文件支持。</p><p>在命令行中，跳转到hexo目录下，使用以下语句安装图片插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>插件会安装到 “node_moudules” 目录下，名为 “hexo-asset-image”。以上执行完毕后，在命令行执行：hexo new “文件”时，会在_post文件夹下同时生成md文件和同名文件夹，这个同名文件夹就是用来放图片的，把你在该文章中需要显示的图片放进去，然后在markdown中选择该目录下的图片使用，这样当md编译生成html文件时，会把图片拷贝到html文件同目录中。最后执行hexo d -g 部署到服务器时，图片也就被部署到服务器中了。</p><p>注意：如果直接把图片拖动到markdown编辑器中，其路径可能为绝对路径，需要改下：</p><p><img src="/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/absolute.png" alt="absolute"></p><p>修改为相对路径：</p><p><img src="/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/relate.png" alt="relate"></p><h3 id="发布新博客"><a href="#发布新博客" class="headerlink" title="发布新博客"></a>发布新博客</h3><p>编辑好博客以后，即可执行以下命令部署到Github上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h2 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h2><p>了解Hexo命令可以看 <a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">这里</a>，这里列出一些常用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init       //在指定目录执行该命令，会将当前目录初始化为hexo站点，生成hexo站点所需的一切文件</span><br><span class="line">$ hexo new “my new blog title”   //新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</span><br><span class="line">$ hexo clean      // 清除缓存，如果对本地文件做了修改，同步到远程验证修改的效果之前，先clean，清除缓存</span><br><span class="line">$ hexo generate   // 可以简写成hexo g 根据markdown文件生成静态文件</span><br><span class="line">$ hexo server     // 或者简写成hexo s 启动本地hexo 服务器，默认localhost:4000可以访问</span><br><span class="line">$ hexo deploy     // 或者简写成hexo d 将本地修改，部署到远端</span><br><span class="line">$ hexo version    // 显示hexo版本</span><br></pre></td></tr></table></figure><p>一些快捷键：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g == hexo generate</span><br><span class="line">$ hexo d == hexo deploy</span><br><span class="line">$ hexo s == hexo server</span><br><span class="line">$ hexo n == hexo new</span><br></pre></td></tr></table></figure><h2 id="配置博客主题"><a href="#配置博客主题" class="headerlink" title="配置博客主题"></a>配置博客主题</h2><p>上面的内容是搭建起了一个正常的博客，但是如果我们想要一个更加好看的博客界面的话，我们必须得使用别的主题。进入 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官网</a> 可以选择很多主题，我选择的是 <a href="https://github.com/fi3ework/hexo-theme-archer" target="_blank" rel="noopener">hexo-theme-archer</a> 。原po做得特别好，而且遇到问题问他，回复速度也巨快～。在按照原po在Github上写的说明就可以修改完配置文件后，运行下列语句即可部署到 Github 上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>此处感谢一下各位写详细教程的大大们，毕竟小白我才体会到，写一篇教程要花很多时间和精力。另外特别感谢下博客主题的作者 <strong>fi3ework</strong> 贡献的主题，作者 <a href="https://github.com/fi3ework" target="_blank" rel="noopener">Github</a> ， 博客主题 <a href="https://github.com/fi3ework/hexo-theme-archer" target="_blank" rel="noopener">hexo-theme-archer</a> 。</p><p>[1] <a href="https://zhuanlan.zhihu.com/p/22718911" target="_blank" rel="noopener">github+hexo+jacman搭建个人博客</a></p><p>[2] <a href="https://www.ezlippi.com/blog/2015/03/github-pages-blog.html" target="_blank" rel="noopener">利用github-pages建立个人博客</a></p><p>[3] <a href="http://lijiankun24.com/Mac%E4%B8%8BHexo%E5%92%8CGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A21/" target="_blank" rel="noopener">Mac 下 Hexo 和 GitHub-Pages 搭建个人博客（一）</a></p><p>[4] <a href="https://madongqiang2201.github.io/2016/07/21/Mac%E4%B8%8BHexo%EF%BC%8Bgithub-pages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">Mac搭建Hexo博客及NexT主题配置优化</a></p><p>[5] <a href="http://www.jensondev.me/2017/04/25/hexo%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E5%8F%91%E5%B8%83%E5%90%8E%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">hexo本地图片发布后不能显示的问题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨晚熬夜终于搭好了一个属于自己的博客，但是对markdown语法还不是很熟悉，于是决定写一篇搭博客的教程来熟悉一下。前人掉坑，后人绕行。那么，废话不多说，就开始吧！:)&lt;/p&gt;
&lt;p&gt;本文主要是针对 &lt;strong&gt;Mac OS&lt;/strong&gt; 系统上基于 &lt;strong
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Hello 2018</title>
    <link href="http://yoursite.com/2018/04/11/Hello-2018/"/>
    <id>http://yoursite.com/2018/04/11/Hello-2018/</id>
    <published>2018-04-11T06:16:24.000Z</published>
    <updated>2018-04-11T23:12:41.709Z</updated>
    
    <content type="html"><![CDATA[<p>Hello, this is my very first blog. I’m new to GitHub and still have much to learn. </p><p>I’m going to write something related to what I read and my research. We can discuss in this blog and learn together. :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hello, this is my very first blog. I’m new to GitHub and still have much to learn. &lt;/p&gt;
&lt;p&gt;I’m going to write something related to what I
      
    
    </summary>
    
    
  </entry>
  
</feed>
