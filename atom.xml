<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-08T18:29:51.899Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker Command</title>
    <link href="http://yoursite.com/2018/05/08/Docker-Command/"/>
    <id>http://yoursite.com/2018/05/08/Docker-Command/</id>
    <published>2018-05-08T16:44:33.000Z</published>
    <updated>2018-05-08T18:29:51.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考网页"><a href="#参考网页" class="headerlink" title="参考网页"></a>参考网页</h2><p>[1] <a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">Docker 入门教程</a> (全文拷贝自本文）</p><p>[2] <a href="https://yeasy.gitbooks.io/docker_practice/content/image/rm.html" target="_blank" rel="noopener">删除本地镜像</a></p><p>[3] <a href="https://yeasy.gitbooks.io/docker_practice/content/image/build.html" target="_blank" rel="noopener">使用 Dockerfile 定制镜像</a> (介绍了dockfile的各项内容)</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="环境配置的难题"><a href="#环境配置的难题" class="headerlink" title="环境配置的难题"></a>环境配置的难题</h3><p>软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？</p><p>用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。</p><p>如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：”它在我的机器可以跑了”（It works on my machine），言下之意就是，其他机器很可能跑不了。</p><p>环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。</p><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。</p><p>虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。</p><p>（1）资源占用多</p><p>虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。</p><p>（2）冗余步骤多</p><p>虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。</p><p>（3）启动慢</p><p>启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。</p><h3 id="Linux-容器"><a href="#Linux-容器" class="headerlink" title="Linux 容器"></a>Linux 容器</h3><p>由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。</p><p>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p><p>由于容器是进程级别的，相比虚拟机有很多优势。</p><p>（1）启动快</p><p>容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。</p><p>（2）资源占用少</p><p>容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。</p><p>（3）体积小</p><p>容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。</p><p>总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。</p><h3 id="Docker-是什么？"><a href="#Docker-是什么？" class="headerlink" title="Docker 是什么？"></a>Docker 是什么？</h3><p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。</p><p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p><p>总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p><h3 id="Docker-的用途"><a href="#Docker-的用途" class="headerlink" title="Docker 的用途"></a>Docker 的用途</h3><p>Docker 的主要用途，目前有三大类。</p><p>（1）提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。</p><p>（2）提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。</p><p>（3）组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</p><h2 id="image-文件"><a href="#image-文件" class="headerlink" title="image 文件"></a>image 文件</h2><p>Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p><p>image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 列出本机的所有 image 文件。</span><br><span class="line">$ docker image ls</span><br><span class="line"></span><br><span class="line"># 删除 image 文件</span><br><span class="line">$ docker image rm [imageName]</span><br></pre></td></tr></table></figure><p>image 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。</p><p>为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库 Docker Hub 是最重要、最常用的 image 仓库。此外，出售自己制作的 image 文件也是可以的。</p><h2 id="实例：hello-world"><a href="#实例：hello-world" class="headerlink" title="实例：hello world"></a>实例：hello world</h2><p>下面，我们通过最简单的 image 文件”hello world”，感受一下 Docker。</p><p>需要说明的是，国内连接 Docker 的官方仓库很慢，还会断线，需要将默认仓库改成国内的镜像网站，具体的修改方法在下一篇文章的第一节。有需要的朋友，可以先看一下。</p><p>首先，运行下面的命令，将 image 文件从仓库抓取到本地。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image pull library/hello-world</span><br></pre></td></tr></table></figure><p>上面代码中，docker image pull是抓取 image 文件的命令。library/hello-world是 image 文件在仓库里面的位置，其中library是 image 文件所在的组，hello-world是 image 文件的名字。</p><p>由于 Docker 官方提供的 image 文件，都放在library组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image pull hello-world</span><br></pre></td></tr></table></figure><p>抓取成功以后，就可以在本机看到这个 image 文件了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls</span><br></pre></td></tr></table></figure><p>现在，运行这个 image 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container run hello-world</span><br></pre></td></tr></table></figure><p>docker container run命令会从 image 文件，生成一个正在运行的容器实例。</p><p>注意，docker container run命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的docker image pull命令并不是必需的步骤。</p><p>如果运行成功，你会在屏幕上读到下面的输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker container run hello-world</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">... ...</span><br></pre></td></tr></table></figure><p>输出这段提示以后，hello world就会停止运行，容器自动终止。</p><p>有些容器不会自动终止，因为提供的是服务。比如，安装运行 Ubuntu 的 image，就可以在命令行体验 Ubuntu 系统。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container run -it ubuntu bash</span><br></pre></td></tr></table></figure><p>对于那些不会自动终止的容器，必须使用docker container kill 命令手动终止。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container kill [containID]</span><br></pre></td></tr></table></figure><h2 id="容器文件"><a href="#容器文件" class="headerlink" title="容器文件"></a>容器文件</h2><p>image 文件生成的容器实例，本身也是一个文件，称为容器文件。也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 列出本机正在运行的容器</span><br><span class="line">$ docker container ls</span><br><span class="line"></span><br><span class="line"># 列出本机所有容器，包括终止运行的容器</span><br><span class="line">$ docker container ls --all</span><br></pre></td></tr></table></figure><p>上面命令的输出结果之中，包括容器的 <code>ID</code>。很多地方都需要提供这个 <code>ID</code>，比如上一节终止容器运行的<code>docker container kill</code>命令。</p><p>终止运行的容器文件，依然会占据硬盘空间，可以使用<code>docker container rm</code>命令删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container rm [containerID]</span><br></pre></td></tr></table></figure><p>运行上面的命令之后，再使用<code>docker container ls --all</code>命令，就会发现被删除的容器文件已经消失了。</p><h2 id="实例：制作自己的-Docker-容器"><a href="#实例：制作自己的-Docker-容器" class="headerlink" title="实例：制作自己的 Docker 容器"></a>实例：制作自己的 Docker 容器</h2><p>学会使用 image 文件以后，接下来的问题就是，如何可以生成 image 文件？如果你要推广自己的软件，势必要自己制作 image 文件。</p><p>这就需要用到 Dockerfile 文件。它是一个文本文件，用来配置 image。Docker 根据 该文件生成二进制的 image 文件。</p><p>下面以 koa-demos 项目为例，介绍怎么写 Dockerfile 文件，实现让用户在 Docker 容器里面运行 Koa 框架。</p><p>作为准备工作，请先下载源码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/ruanyf/koa-demos.git</span><br><span class="line">$ cd koa-demos</span><br></pre></td></tr></table></figure><h3 id="编写-Dockerfile-文件"><a href="#编写-Dockerfile-文件" class="headerlink" title="编写 Dockerfile 文件"></a>编写 Dockerfile 文件</h3><p>首先，在项目的根目录下，新建一个文本文件<code>.dockerignore</code>，写入下面的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.git</span><br><span class="line">node_modules</span><br><span class="line">npm-debug.log</span><br></pre></td></tr></table></figure><p>上面代码表示，这三个路径要排除，不要打包进入 image 文件。如果你没有路径要排除，这个文件可以不新建。</p><p>然后，在项目的根目录下，新建一个文本文件 <code>Dockerfile</code>，写入下面的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM node:8.4</span><br><span class="line">COPY . /app</span><br><span class="line">WORKDIR /app</span><br><span class="line">RUN npm install --registry=https://registry.npm.taobao.org</span><br><span class="line">EXPOSE 3000</span><br></pre></td></tr></table></figure><p>上面代码一共五行，含义如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM node:8.4：该 image 文件继承官方的 node image，冒号表示标签，这里标签是8.4，即8.4版本的 node。</span><br><span class="line">COPY . /app：将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的/app目录。</span><br><span class="line">WORKDIR /app：指定接下来的工作路径为/app。</span><br><span class="line">RUN npm install：在/app目录下，运行npm install命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。</span><br><span class="line">EXPOSE 3000：将容器 3000 端口暴露出来， 允许外部连接这个端口。</span><br></pre></td></tr></table></figure><h3 id="创建-image-文件"><a href="#创建-image-文件" class="headerlink" title="创建 image 文件"></a>创建 image 文件</h3><p>有了 Dockerfile 文件以后，就可以使用<code>docker image build</code>命令创建 image 文件了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image build -t koa-demo .</span><br><span class="line"># 或者</span><br><span class="line">$ docker image build -t koa-demo:0.0.1 .</span><br></pre></td></tr></table></figure><p>上面代码中，<code>-t</code>参数用来指定 image 文件的名字，后面还可以用冒号指定标签。如果不指定，默认的标签就是<code>latest</code>。最后的那个点表示 Dockerfile 文件所在的路径，上例是当前路径，所以是一个点。</p><p>如果运行成功，就可以看到新生成的 image 文件<code>koa-demo</code>了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls</span><br></pre></td></tr></table></figure><h3 id="生成容器"><a href="#生成容器" class="headerlink" title="生成容器"></a>生成容器</h3><p><code>docker container run</code>命令会从 image 文件生成容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker container run -p 8000:3000 -it koa-demo /bin/bash</span><br><span class="line"># 或者</span><br><span class="line">$ docker container run -p 8000:3000 -it koa-demo:0.0.1 /bin/bash</span><br></pre></td></tr></table></figure><p>上面命令的各个参数含义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-p参数：容器的 3000 端口映射到本机的 8000 端口。</span><br><span class="line">-it参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。</span><br><span class="line">koa-demo:0.0.1：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。</span><br><span class="line">/bin/bash：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。</span><br></pre></td></tr></table></figure><p>如果一切正常，运行上面的命令以后，就会返回一个命令行提示符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@66d80f4aaf1e:/app#</span><br></pre></td></tr></table></figure><p>这表示你已经在容器里面了，返回的提示符就是容器内部的 Shell 提示符。执行下面的命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@66d80f4aaf1e:/app# node demos/01.js</span><br></pre></td></tr></table></figure><p>这时，Koa 框架已经运行起来了。打开本机的浏览器，访问 <a href="http://127.0.0.1:8000，网页显示&quot;Not" target="_blank" rel="noopener">http://127.0.0.1:8000，网页显示&quot;Not</a> Found”，这是因为这个 demo 没有写路由。</p><p>这个例子中，Node 进程运行在 Docker 容器的虚拟环境里面，进程接触到的文件系统和网络接口都是虚拟的，与本机的文件系统和网络接口是隔离的，因此需要定义容器与物理机的端口映射（map）。</p><p>现在，在容器的命令行，按下 <code>Ctrl + c</code> 停止 Node 进程，然后按下 <code>Ctrl + d</code> （或者输入 exit）退出容器。此外，也可以用<code>docker container kill</code>终止容器运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在本机的另一个终端窗口，查出容器的 ID</span><br><span class="line">$ docker container ls</span><br><span class="line"></span><br><span class="line"># 停止指定的容器运行</span><br><span class="line">$ docker container kill [containerID]</span><br></pre></td></tr></table></figure><p>容器停止运行之后，并不会消失，用下面的命令删除容器文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查出容器的 ID</span><br><span class="line">$ docker container ls --all</span><br><span class="line"></span><br><span class="line"># 删除指定的容器文件</span><br><span class="line">$ docker container rm [containerID]</span><br></pre></td></tr></table></figure><p>也可以使用<code>docker container run</code>命令的<code>--rm</code>参数，在容器终止运行后自动删除容器文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container run --rm -p 8000:3000 -it koa-demo /bin/bash</span><br></pre></td></tr></table></figure><h3 id="CMD-命令"><a href="#CMD-命令" class="headerlink" title="CMD 命令"></a>CMD 命令</h3><p>上一节的例子里面，容器启动以后，需要手动输入命令<code>node demos/01.js</code>。我们可以把这个命令写在 Dockerfile 里面，这样容器启动以后，这个命令就已经执行了，不用再手动输入了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM node:8.4</span><br><span class="line">COPY . /app</span><br><span class="line">WORKDIR /app</span><br><span class="line">RUN npm install --registry=https://registry.npm.taobao.org</span><br><span class="line">EXPOSE 3000</span><br><span class="line">CMD node demos/01.js</span><br></pre></td></tr></table></figure><p>上面的 Dockerfile 里面，多了最后一行<code>CMD node demos/01.js</code>，它表示容器启动后自动执行<code>node demos/01.js</code>。</p><p>你可能会问，<code>RUN</code>命令与<code>CMD</code>命令的区别在哪里？简单说，<code>RUN</code>命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件；<code>CMD</code>命令则是在容器启动后执行。另外，一个 Dockerfile 可以包含多个<code>RUN</code>命令，但是只能有一个<code>CMD</code>命令。</p><p>注意，指定了<code>CMD</code>命令以后，<code>docker container run</code>命令就不能附加命令了（比如前面的<code>/bin/bash</code>），否则它会覆盖<code>CMD</code>命令。现在，启动容器可以使用下面的命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container run --rm -p 8000:3000 -it koa-demo:0.0.1</span><br></pre></td></tr></table></figure><h3 id="发布-image-文件"><a href="#发布-image-文件" class="headerlink" title="发布 image 文件"></a>发布 image 文件</h3><p>容器运行成功后，就确认了 image 文件的有效性。这时，我们就可以考虑把 image 文件分享到网上，让其他人使用。</p><p>首先，去 hub.docker.com 或 cloud.docker.com 注册一个账户。然后，用下面的命令登录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker login</span><br></pre></td></tr></table></figure><p>接着，为本地的 image 标注用户名和版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image tag [imageName] [username]/[repository]:[tag]</span><br><span class="line"># 实例</span><br><span class="line">$ docker image tag koa-demos:0.0.1 ruanyf/koa-demos:0.0.1</span><br></pre></td></tr></table></figure><p>也可以不标注用户名，重新构建一下 image 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image build -t [username]/[repository]:[tag] .</span><br></pre></td></tr></table></figure><p>最后，发布 image 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image push [username]/[repository]:[tag]</span><br></pre></td></tr></table></figure><p>发布成功以后，登录 hub.docker.com，就可以看到已经发布的 image 文件。</p><h2 id="其他有用的命令"><a href="#其他有用的命令" class="headerlink" title="其他有用的命令"></a>其他有用的命令</h2><p>docker 的主要用法就是上面这些，此外还有几个命令，也非常有用。</p><p>(1) <code>docker container start</code></p><p>前面的<code>docker container run</code>命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。如果希望重复使用容器，就要使用<code>docker container start</code>命令，它用来启动已经生成、已经停止运行的容器文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container start [containerID]</span><br></pre></td></tr></table></figure><p>(2）<code>docker container stop</code></p><p>前面的<code>docker container kill</code>命令终止容器运行，相当于向容器里面的主进程发出 SIGKILL 信号。而<code>docker container stop</code>命令也是用来终止容器运行，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash container stop [containerID]</span><br></pre></td></tr></table></figure><p>这两个信号的差别是，应用程序收到 SIGTERM 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号。如果收到 SIGKILL 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。</p><p>(3）<code>docker container logs</code></p><p><code>docker container logs</code>命令用来查看 docker 容器的输出，即容器里面 Shell 的标准输出。如果docker run命令运行容器的时候，没有使用<code>-it</code>参数，就要用这个命令查看输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container logs [containerID]</span><br></pre></td></tr></table></figure><p>(4）<code>docker container exec</code></p><p><code>docker container exec</code>命令用于进入一个正在运行的 docker 容器。如果<code>docker run</code>命令运行容器的时候，没有使用<code>-it</code>参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 Shell 执行命令了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container exec -it [containerID] /bin/bash</span><br></pre></td></tr></table></figure><p>(5）<code>docker container cp</code></p><p><code>docker container cp</code>命令用于从正在运行的 Docker 容器里面，将文件拷贝到本机。下面是拷贝到当前目录的写法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container cp [containID]:[/path/to/file] .</span><br></pre></td></tr></table></figure><p>(6) 删除本地镜像</p><p>如果要删除本地的镜像，可以使用 docker image rm 命令，其格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br></pre></td></tr></table></figure><p>用 ID、镜像名、摘要删除镜像</p><p>其中，&lt;镜像&gt; 可以是 镜像短 ID、镜像长 ID、镜像名 或者 镜像摘要。</p><p>比如我们有这么一些镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos                      latest              0584b3d2cf6d        3 weeks ago         196.5 MB</span><br><span class="line">redis                       alpine              501ad78535f0        3 weeks ago         21.03 MB</span><br><span class="line">docker                      latest              cf693ec9b5c7        3 weeks ago         105.1 MB</span><br><span class="line">nginx                       latest              e43d811ce2f4        5 weeks ago         181.5 MB</span><br></pre></td></tr></table></figure><p>我们可以用镜像的完整 ID，也称为 长 ID，来删除镜像。使用脚本的时候可能会用长 ID，但是人工输入就太累了，所以更多的时候是用 短 ID 来删除镜像。docker image ls 默认列出的就已经是短 ID 了，一般取前3个字符以上，只要足够区分于别的镜像就可以了。</p><p>比如这里，如果我们要删除 redis:alpine 镜像，可以执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm 501</span><br><span class="line">Untagged: redis:alpine</span><br><span class="line">Untagged: redis@sha256:f1ed3708f538b537eb9c2a7dd50dc90a706f7debd7e1196c9264edeea521a86d</span><br><span class="line">Deleted: sha256:501ad78535f015d88872e13fa87a828425117e3d28075d0c117932b05bf189b7</span><br><span class="line">Deleted: sha256:96167737e29ca8e9d74982ef2a0dda76ed7b430da55e321c071f0dbff8c2899b</span><br><span class="line">Deleted: sha256:32770d1dcf835f192cafd6b9263b7b597a1778a403a109e2cc2ee866f74adf23</span><br><span class="line">Deleted: sha256:127227698ad74a5846ff5153475e03439d96d4b1c7f2a449c7a826ef74a2d2fa</span><br><span class="line">Deleted: sha256:1333ecc582459bac54e1437335c0816bc17634e131ea0cc48daa27d32c75eab3</span><br><span class="line">Deleted: sha256:4fc455b921edf9c4aea207c51ab39b10b06540c8b4825ba57b3feed1668fa7c7</span><br></pre></td></tr></table></figure><p>我们也可以用镜像名，也就是 &lt;仓库名&gt;:&lt;标签&gt;，来删除镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm centos</span><br><span class="line">Untagged: centos:latest</span><br><span class="line">Untagged: centos@sha256:b2f9d1c0ff5f87a4743104d099a3d561002ac500db1b9bfa02a783a46e0d366c</span><br><span class="line">Deleted: sha256:0584b3d2cf6d235ee310cf14b54667d889887b838d3f3d3033acd70fc3c48b8a</span><br><span class="line">Deleted: sha256:97ca462ad9eeae25941546209454496e1d66749d53dfa2ee32bf1faabd239d38</span><br></pre></td></tr></table></figure><p>当然，更精确的是使用 镜像摘要 删除镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls --digests</span><br><span class="line">REPOSITORY                  TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZE</span><br><span class="line">node                        slim                sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228   6e0c4c8e3913        3 weeks ago         214 MB</span><br><span class="line"></span><br><span class="line">$ docker image rm node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228</span><br><span class="line">Untagged: node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228</span><br></pre></td></tr></table></figure><p>可以使用 <code>docker image ls -q</code> 来配合使用 <code>docker image rm</code>，这样可以成批的删除希望删除的镜像。我们在“镜像列表”章节介绍过很多过滤镜像列表的方式都可以拿过来使用。</p><p>比如，我们需要删除所有仓库名为 redis 的镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm $(docker image ls -q redis)</span><br></pre></td></tr></table></figure><p>或者删除所有在 mongo:3.2 之前的镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm $(docker image ls -q -f before=mongo:3.2)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考网页&quot;&gt;&lt;a href=&quot;#参考网页&quot; class=&quot;headerlink&quot; title=&quot;参考网页&quot;&gt;&lt;/a&gt;参考网页&lt;/h2&gt;&lt;p&gt;[1] &lt;a href=&quot;http://www.ruanyifeng.com/blog/2018/02/docker-tut
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="Command" scheme="http://yoursite.com/tags/Command/"/>
    
  </entry>
  
  <entry>
    <title>Docker install</title>
    <link href="http://yoursite.com/2018/05/08/Docker-install/"/>
    <id>http://yoursite.com/2018/05/08/Docker-install/</id>
    <published>2018-05-08T15:11:10.000Z</published>
    <updated>2018-05-08T15:24:22.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考网页"><a href="#参考网页" class="headerlink" title="参考网页"></a>参考网页</h2><p>[1] <a href="https://yeasy.gitbooks.io/docker_practice/content/install/ubuntu.html" target="_blank" rel="noopener">Ubuntu 安装 Docker CE</a></p><p>[2] <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">官方文档</a></p><p>[3] <a href="https://techoverflow.net/2017/03/01/solving-docker-permission-denied-while-trying-to-connect-to-the-docker-daemon-socket/" target="_blank" rel="noopener">Solving Docker permission denied while trying to connect to the Docker daemon socket</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><p>Docker CE 支持以下版本的 Ubuntu 操作系统：</p><ul><li>Artful 17.10 (Docker CE 17.11 Edge +)</li><li>Xenial 16.04 (LTS)</li><li>Trusty 14.04 (LTS)</li></ul><p>Docker CE 可以安装在 64 位的 x86 平台或 ARM 平台上。Ubuntu 发行版中，LTS（Long-Term-Support）长期支持版本，会获得 5 年的升级维护支持，这样的版本会更稳定，因此在生产环境中推荐使用 LTS 版本,当前最新的 LTS 版本为 Ubuntu 16.04。</p><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><p>旧版本的 Docker 称为 docker 或者 docker-engine，使用以下命令卸载旧版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker \</span><br><span class="line">               docker-engine \</span><br><span class="line">               docker.io</span><br></pre></td></tr></table></figure><h3 id="Ubuntu-16-04"><a href="#Ubuntu-16-04" class="headerlink" title="Ubuntu 16.04 +"></a>Ubuntu 16.04 +</h3><p>Ubuntu 16.04 + 上的 Docker CE 默认使用 overlay2 存储层驱动,无需手动配置。</p><h2 id="使用-APT-安装"><a href="#使用-APT-安装" class="headerlink" title="使用 APT 安装"></a>使用 APT 安装</h2><p>1 由于 apt 源使用 HTTPS 以确保软件下载过程中不被篡改。因此，我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><p>2 为了确认所下载软件包的合法性，需要添加软件源的 GPG 密钥。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>3 Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88, by searching for the last 8 characters of the fingerprint.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class="line"></span><br><span class="line">pub   4096R/0EBFCD88 2017-02-22</span><br><span class="line">      Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88</span><br><span class="line">uid                  Docker Release (CE deb) &lt;docker@docker.com&gt;</span><br><span class="line">sub   4096R/F273FCD8 2017-02-22</span><br></pre></td></tr></table></figure><p>4 然后，我们需要向 source.list 中添加 Docker 软件源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository \</span><br><span class="line">   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><br><span class="line">   $(lsb_release -cs) \</span><br><span class="line">   stable&quot;</span><br></pre></td></tr></table></figure><p>以上命令会添加稳定版本的 Docker CE APT 镜像源，如果需要最新或者测试版本的 Docker CE 请在 stable 后加上 edge 或者 test。从 Docker 17.06 开始，edge test 版本的 APT 镜像源也会包含稳定版本的 Docker。</p><p>5 安装 Docker CE</p><p>更新 apt 软件包缓存，并安装 docker-ce：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><h2 id="启动-Docker-CE"><a href="#启动-Docker-CE" class="headerlink" title="启动 Docker CE"></a>启动 Docker CE</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl enable docker</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>建立 docker 用户组<br>默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组。</p><p>建立 docker 组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br><span class="line">将当前用户加入 docker 组：</span><br><span class="line"></span><br><span class="line">$ sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><p>退出当前终端并<strong>重新登录</strong>，进行如下测试。</p><p>测试 Docker 是否安装正确</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ docker run hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image &apos;hello-world:latest&apos; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">ca4f61b1923c: Pull complete</span><br><span class="line">Digest: sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://cloud.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/engine/userguide/</span><br></pre></td></tr></table></figure><p>若能正常输出以上信息，则说明安装成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考网页&quot;&gt;&lt;a href=&quot;#参考网页&quot; class=&quot;headerlink&quot; title=&quot;参考网页&quot;&gt;&lt;/a&gt;参考网页&lt;/h2&gt;&lt;p&gt;[1] &lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Git Command Notes</title>
    <link href="http://yoursite.com/2018/05/04/Github-Command-Notes/"/>
    <id>http://yoursite.com/2018/05/04/Github-Command-Notes/</id>
    <published>2018-05-04T19:06:52.000Z</published>
    <updated>2018-05-08T22:01:58.821Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="Git-的三种状态"><a href="#Git-的三种状态" class="headerlink" title="Git 的三种状态"></a>Git 的三种状态</h3><p>Git 有三种状态，你的文件可能处于其中之一：已提交（committed）、已修改（modified）和已暂存（staged）。 </p><ul><li><p>已提交：表示数据已经安全的保存在本地数据库中。 </p></li><li><p>已修改：表示修改了文件，但还没保存到数据库中。 </p></li><li><p>已暂存：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</p></li></ul><p>由此引入 Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。</p><p><img src="/2018/05/04/Github-Command-Notes/areas.png" alt="areas"></p><p>Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。</p><p>工作目录是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p><p>暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作`‘索引’’，不过一般说法还是叫暂存区域。</p><p>基本的 Git 工作流程如下：</p><p>1 在工作目录中修改文件。</p><p>2 暂存文件，将文件的快照放入暂存区域。</p><p>3 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录</p><h3 id="记录每次更新到仓库"><a href="#记录每次更新到仓库" class="headerlink" title="记录每次更新到仓库"></a>记录每次更新到仓库</h3><p>工作目录中除已跟踪文件以外的所有其它文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有放入暂存区。 初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。</p><p>编辑过某些文件之后，由于自上次提交后你对它们做了修改，Git 将它们标记为已修改文件。 我们逐步将这些修改过的文件放入暂存区，然后提交所有暂存了的修改，如此反复。所以使用 Git 时文件的生命周期如下：</p><p><img src="/2018/05/04/Github-Command-Notes/lifecycle.png" alt="lifecycle.png"></p><h2 id="Github-的使用"><a href="#Github-的使用" class="headerlink" title="Github 的使用"></a>Github 的使用</h2><h3 id="本地SSH-Keys的设置"><a href="#本地SSH-Keys的设置" class="headerlink" title="本地SSH Keys的设置"></a>本地SSH Keys的设置</h3><p>我们需要通过SSH来让本地编辑的内容托管到Github，所以要对先SSH进行设置。</p><p>首先检查电脑上现有的SSH Keys，在Terminal输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh</span><br></pre></td></tr></table></figure><p>输入 <code>ls</code> 查看是否有ssh keys。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br></pre></td></tr></table></figure><p>如果只显示一个 <code>known_hosts</code> ，说明没有ssh keys，可以跳过这一步，否则需要备份和移除原来的SSH Keys </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（显示  id_rsa  id_rsa.pub  known_hosts）</span><br><span class="line">$ mkdir key_backup</span><br><span class="line">$ cp id_rsa* key_backup</span><br><span class="line">$ rm id_rsa*</span><br></pre></td></tr></table></figure><p>输入以下代码形成新的SSH Key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，回车就好。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C “your-email”</span><br><span class="line"></span><br><span class="line">显示：</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</span><br></pre></td></tr></table></figure><p>上面代码中的 “your-email” 就是你在学习Git时，你自己设置的Git用户名时给出的email地址 ( 我的话，使用的是注册github的email )。</p><p>然后系统会要你输入加密串（Passphrase）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;</span><br><span class="line">Enter same passphrase again:&lt;再次输入加密串&gt;</span><br></pre></td></tr></table></figure><p>最后看到SSH Key success，就成功设置SSH Key了。</p><h3 id="添加SSH-Key到GitHub"><a href="#添加SSH-Key到GitHub" class="headerlink" title="添加SSH Key到GitHub"></a>添加SSH Key到GitHub</h3><p>在本机设置SSH Key之后，需要添加到 GitHub 上，以完成SSH链接的设置。输入下面代码打开SSH文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open ~/.ssh</span><br></pre></td></tr></table></figure><p>用文本编辑工具打开 <strong>id_rsa.pub</strong> 文件。</p><p>登录Github，点击右侧自己的头像，选择 <strong>“setting”</strong> 。选择右侧的 <strong>“SSH and GPG Keys”</strong> 项，把 <strong>id_rsa.pub</strong> 文件中的内容复制到如下位置，然后点击 <strong>Add Key</strong> 按钮即可。</p><p>输入下面的命令，看看设置是否成功，<a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>` 的部分不要修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果是下面的反应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>不要紧张，输入yes就好，然后会看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi &lt;em&gt;username&lt;/em&gt;! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><h3 id="设置你的账号信息"><a href="#设置你的账号信息" class="headerlink" title="设置你的账号信息"></a>设置你的账号信息</h3><p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。</p><p>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;你的名字&quot;</span><br><span class="line">$ git config --global user.email &quot;your_email@youremail.com&quot;</span><br></pre></td></tr></table></figure><p>好了，你已经可以成功连接GitHub了。</p><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>在自己的账号下，新建一个repository（仓库）。创建成功后，可根据一下界面操作。</p><p><img src="/2018/05/04/Github-Command-Notes/GitRepo.png" alt="GitRepo"></p><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>版本库又名仓库,英文名repository,你可以简单理解成一个目录,这个目录里面的所有文件都可以被Git管理起来, 每个文件的修改、删除,Git都能跟踪,以便任何时刻都可以追踪历史,或者在将来某个时刻可以”还原”。具体步骤已经完整在上图中展示，下面具体说明。</p><p>第一步:首先,选择一个合适的地方,创建一个空目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir yourRepo </span><br><span class="line">$ cd yourRepo</span><br></pre></td></tr></table></figure><p>第二步:通过git init命令把这个目录变成Git可以管理的仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init  </span><br><span class="line">Initialized empty Git repository in ./yourRepo/.git/</span><br></pre></td></tr></table></figure><p>在<code>./yourRepo</code>目录下 新建一个README.txt文件,内容为”hello github”</p><p>第三步:用命令git add告诉Git,把文件添加到仓库：</p><pre><code>$ git add README.txt  </code></pre><p>第四步:用命令git commit 把文件提交到仓库：</p><pre><code>$ git commit -m &quot;hello github&quot;</code></pre><p>第五步:输入远程地址</p><pre><code>$ git remote add origin git@github.com:yourName/yourRepo.git</code></pre><p>或者</p><pre><code>$ git remote add origin https://github.com/yourName/yourRepo.git </code></pre><p>如果显示  <code>fatal: remote origin already exists</code>，使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rm origin</span><br><span class="line">$ git remote add origin git@github.com:yourName/yourRepo.git</span><br></pre></td></tr></table></figure><p>第六步:上传到github</p><p>如果该仓库是第一次进行push，输入</p><pre><code>$ git push -u origin master</code></pre><p>如果已经传输过，此处只是更新，只需输入：</p><pre><code>$ git push</code></pre><p>提交成功后就可以进入github查看自己的项目了。</p><p><code>git push</code>命令会将本地仓库推送到远程服务器。<code>git pull</code>命令则相反。<br>注：首次提交，先<code>git pull</code>下，修改完代码后，使用<code>git status</code>可以查看文件的差别。</p><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。 来看一个实际的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat .gitignore</span><br><span class="line">*.[oa]</span><br><span class="line">*~</span><br></pre></td></tr></table></figure><p>第一行告诉 Git 忽略所有以 <code>.o</code> 或 <code>.a</code> 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的。 第二行告诉 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。 此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。 要养成一开始就设置好 <code>.gitignore</code> 文件的习惯，以免将来误提交这类无用的文件。</p><p>文件 <code>.gitignore</code> 的格式规范如下：</p><ul><li><p>所有空行或者以 <code>＃</code> 开头的行都会被 Git 忽略。</p></li><li><p>可以使用标准的 glob 模式匹配。</p></li><li><p>匹配模式可以以（/）开头防止递归。</p></li><li><p>匹配模式可以以（/）结尾指定目录。</p></li><li><p>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</p></li></ul><p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。 星号（<code>*</code>）匹配零个或多个任意字符；<code>[abc]</code> 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（<code>?</code>）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 <code>[0-9]</code> 表示匹配所有 0 到 9 的数字）。 使用两个星号（<code>*</code>) 表示匹配任意中间目录，比如<code>a/**/z</code> 可以匹配 <code>a/z</code>, <code>a/b/z</code> 或 <code>a/b/c/z</code>等。</p><p>我们再看一个 <code>.gitignore</code> 文件的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># no .a files</span><br><span class="line">*.a</span><br><span class="line"></span><br><span class="line"># but do track lib.a, even though you&apos;re ignoring .a files above</span><br><span class="line">!lib.a</span><br><span class="line"></span><br><span class="line"># only ignore the TODO file in the current directory, not subdir/TODO</span><br><span class="line">/TODO</span><br><span class="line"></span><br><span class="line"># ignore all files in the build/ directory</span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"># ignore doc/notes.txt, but not doc/server/arch.txt</span><br><span class="line">doc/*.txt</span><br><span class="line"></span><br><span class="line"># ignore all .pdf files in the doc/ directory</span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><p><strong>Tip</strong>: GitHub 有一个十分详细的针对数十种项目及语言的 <code>.gitignore</code> 文件列表，你可以在 <a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a> 找到它.</p><h2 id="某些push错误的情况"><a href="#某些push错误的情况" class="headerlink" title="某些push错误的情况"></a>某些push错误的情况</h2><h3 id="错误1-新建仓库push出错"><a href="#错误1-新建仓库push出错" class="headerlink" title="错误1: 新建仓库push出错"></a>错误1: 新建仓库push出错</h3><p>有时候对新建的仓库进行push操作，会出现上传失败的情况。<br>通常出现这种情况的原因，是新建的仓库往往会有一个文件Readme.md文件，而本地仓库中没有这个文件，也就是说本地仓库与服务器端仓库没有实现同步。所以将这个Readme.md文件pull到本地，然后再commit提交，应该就没有问题了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master  //该指令必须先执行，否则到push的时候会报错，因为在github端已经有一个文件了：README.md，会提示远程仓库和本地仓库有不一致的地方</span><br></pre></td></tr></table></figure><h3 id="错误2-本地仓库与远程仓库不一致"><a href="#错误2-本地仓库与远程仓库不一致" class="headerlink" title="错误2: 本地仓库与远程仓库不一致"></a>错误2: 本地仓库与远程仓库不一致</h3><p>在 push 操作的时候遇到下述错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">error: 无法推送一些引用到 &apos;git@github.com:upcAutoLang/BackgroundSplit-OpenCV.git&apos; </span><br><span class="line">提示：更新被拒绝，因为远程仓库包含您本地尚不存在的提交。这通常是因为另外 </span><br><span class="line">提示：一个仓库已向该引用进行了推送。再次推送前，您可能需要先整合远程变更 </span><br><span class="line">提示：（如 &apos;git pull ...&apos;）。 </span><br><span class="line">提示：详见 &apos;git push --help&apos; 中的 &apos;Note about fast-forwards&apos; 小节。</span><br></pre></td></tr></table></figure><p>出现该情况的原因可能是之前在上传时创建的.git文件被删除或者修改，也可能是其他人在 Github 上提交过代码。</p><p><strong>解决方案：</strong></p><p>1 强行上传：</p><pre><code>$ git push -u origin master</code></pre><p>2 尽量先同步 Github 上的代码到本地，在上面更改之后再上传。</p><pre><code>$ git pull origin master $ git push -u origin master</code></pre><p>必须保证每个文件夹下不能再有除了刚才生成的.git文件夹之外的.git，否则上传后那个文件夹将会是空文件夹，因为.git文件夹是包含连接信息的。和别的会有冲突。</p><h3 id="错误3-上传文件太大"><a href="#错误3-上传文件太大" class="headerlink" title="错误3: 上传文件太大"></a>错误3: 上传文件太大</h3><p>出现错误：<code>this exceeds Github’s file size limit of 100MB</code></p><p><strong>千万不要用这种办法，会把本地的文件删除！！！太坑了</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git filter-branch --force --index-filter&quot;git rm --cached --ignore-unmatch 文件名及详细路径&quot;  --prune-empty--tag-name-filter cat -- --all</span><br><span class="line"></span><br><span class="line">$ git commit --amend –CHEAD</span><br><span class="line"></span><br><span class="line">再执行一次</span><br><span class="line"></span><br><span class="line">$ git push -u origin master。</span><br></pre></td></tr></table></figure><p><strong>解决办法参考下文<code>git reflog</code></strong></p><h2 id="常用Git命令"><a href="#常用Git命令" class="headerlink" title="常用Git命令"></a>常用Git命令</h2><h3 id="Git-add-Git-commit-添加错文件-撤销"><a href="#Git-add-Git-commit-添加错文件-撤销" class="headerlink" title="Git add, Git commit 添加错文件 撤销"></a>Git add, Git commit 添加错文件 撤销</h3><h4 id="Git-add-添加多余文件"><a href="#Git-add-添加多余文件" class="headerlink" title="Git add 添加多余文件"></a>Git add 添加多余文件</h4><p><code>git add</code> 如果添加了错误的文件的话</p><p>撤销操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status 先看一下add 中的文件 </span><br><span class="line">git reset HEAD 如果后面什么都不跟的话 就是上一次add 里面的全部撤销了 </span><br><span class="line">git reset HEAD XXX/XXX/XXX.java 就是对某个文件进行撤销了</span><br></pre></td></tr></table></figure><h4 id="Git-commit-错误"><a href="#Git-commit-错误" class="headerlink" title="Git commit 错误"></a>Git commit 错误</h4><p>如果不小心 弄错了 <code>git add</code>后 ， 又 <code>git commit</code> 了。<br>先使用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git log 查看节点 </span><br><span class="line">commit xxxxxxxxxxxxxxxxxxxxxxxxxx </span><br><span class="line">Merge: </span><br><span class="line">Author: </span><br><span class="line">Date:</span><br></pre></td></tr></table></figure><p>然后 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset commit_id</span><br></pre></td></tr></table></figure><p>PS：还没有 push 也就是 <code>repo upload</code> 的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset commit_id （回退到上一个 提交的节点 代码还是原来你修改的） </span><br><span class="line">git reset –hard commit_id （回退到上一个commit节点， 代码也发生了改变，变成上一次的）</span><br></pre></td></tr></table></figure><h4 id="commit后最佳撤销办法git-reflog"><a href="#commit后最佳撤销办法git-reflog" class="headerlink" title="commit后最佳撤销办法git reflog"></a>commit后最佳撤销办法<code>git reflog</code></h4><p>首先使用 <code>git reflog</code> 命令查看操作记录:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">c1c1b21 HEAD@&#123;0&#125;: commit (amend): add blank line to index.html</span><br><span class="line">9ff821d HEAD@&#123;1&#125;: commit: add blank line to index.html</span><br><span class="line">b078331 HEAD@&#123;2&#125;: commit: no more commit!</span><br><span class="line">b86e902 HEAD@&#123;3&#125;: commit: so many commit</span><br><span class="line">77e6ce9 HEAD@&#123;4&#125;: commit: this is another commit</span><br><span class="line">ccde039 HEAD@&#123;5&#125;: commit: this is a commit</span><br><span class="line">a49dcf4 HEAD@&#123;6&#125;: clone: from ssh://liux@xxx.xx.xx.xxx:29418/git_test.git</span><br></pre></td></tr></table></figure><p>看到 amend 操作之前的最后一个操作就是 <code>HEAD@{1}</code>.<br>现在可以用 <code>git reset</code> 将当前分支的 HEAD 指向 <code>HEAD@{1}</code>, 即可达到撤销 amend 的目的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --soft HEAD@&#123;1&#125;</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of &apos;origin/master&apos; by 5 commits.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">    modified:   index.html</span><br></pre></td></tr></table></figure><p>随即使用 <code>git status</code> 查看状态, 发现 amend 的内容已经被撤销 (到工作区) 了.</p><p>如果想撤销到暂存区, 就用 <code>git reset --soft HEAD@{1}</code> .</p><p>如果想干掉这个修改, 就用 <code>git reset --hard HEAD@{1}</code> .</p><p>这和 <code>git reset</code> 操作 commit 的情形是一样的.</p><p>如果一个 commit 被 amend 了多次, 也可以用这种方法撤销到任意一次 amend 处:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">937fd53 HEAD@&#123;0&#125;: commit (amend): add blank line to index.html</span><br><span class="line">7589755 HEAD@&#123;1&#125;: commit (amend): add blank line to index.html</span><br><span class="line">f7ade82 HEAD@&#123;2&#125;: commit (amend): add blank line to index.html</span><br><span class="line">c1c1b21 HEAD@&#123;3&#125;: commit (amend): add blank line to index.html</span><br><span class="line">9ff821d HEAD@&#123;4&#125;: commit: add blank line to index.html</span><br><span class="line">$ git reset --soft HEAD@&#123;2&#125;</span><br></pre></td></tr></table></figure><p>可以看出, 不止是 amend 操作, 其他操作也可以用这种方法进行撤销.</p><h4 id="Push-之后发现错误"><a href="#Push-之后发现错误" class="headerlink" title="Push 之后发现错误"></a>Push 之后发现错误</h4><p>如果要是提交了以后，可以使用 <code>git revert</code></p><p>还原已经提交的修改 </p><p>此次操作之前和之后的commit和history都会保留，并且把这次撤销作为一次最新的提交</p><p><strong>最好不要用这种办法，会把本地的文件删除！！！虽然可以再revert回来</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD 撤销前一次 commit </span><br><span class="line">git revert HEAD^ 撤销前前一次 commit </span><br><span class="line">git revert commit-id (撤销指定的版本，撤销也会作为一次提交进行保存） </span><br><span class="line">git revert是提交一个新的版本，将需要revert的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容。</span><br></pre></td></tr></table></figure><h3 id="查看、添加、提交、删除、找回，重置修改文件"><a href="#查看、添加、提交、删除、找回，重置修改文件" class="headerlink" title="查看、添加、提交、删除、找回，重置修改文件"></a>查看、添加、提交、删除、找回，重置修改文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">git help &lt;command&gt; # 显示command的help</span><br><span class="line"></span><br><span class="line">git show # 显示某次提交的内容 git show $id</span><br><span class="line"></span><br><span class="line">git co -- &lt;file&gt; # 抛弃工作区修改</span><br><span class="line"></span><br><span class="line">git co . # 抛弃工作区修改</span><br><span class="line"></span><br><span class="line">git add &lt;file&gt; # 将工作文件修改提交到本地暂存区</span><br><span class="line"></span><br><span class="line">git add . # 将所有修改过的工作文件提交暂存区</span><br><span class="line"></span><br><span class="line">git rm &lt;file&gt; # 从版本库中删除文件</span><br><span class="line"></span><br><span class="line">git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件</span><br><span class="line"></span><br><span class="line">git reset &lt;file&gt; # 从暂存区恢复到工作文件</span><br><span class="line"></span><br><span class="line">git reset -- . # 从暂存区恢复到工作文件</span><br><span class="line"></span><br><span class="line">git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span><br><span class="line"></span><br><span class="line">git ci &lt;file&gt; git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am &quot;some comments&quot;</span><br><span class="line"></span><br><span class="line">git ci --amend # 修改最后一次提交记录</span><br><span class="line"></span><br><span class="line">git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象</span><br><span class="line"></span><br><span class="line">git revert HEAD # 恢复最后一次提交的状态</span><br></pre></td></tr></table></figure><p>查看文件diff</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;file&gt; # 比较当前文件和暂存区文件差异 git diff</span><br><span class="line"></span><br><span class="line">git diff &lt;id1&gt;&lt;id2&gt; # 比较两次提交之间的差异</span><br><span class="line"></span><br><span class="line">git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较</span><br><span class="line"></span><br><span class="line">git diff --staged # 比较暂存区和版本库差异</span><br><span class="line"></span><br><span class="line">git diff --cached # 比较暂存区和版本库差异</span><br><span class="line"></span><br><span class="line">git diff --stat # 仅仅比较统计信息</span><br></pre></td></tr></table></figure><p>查看提交记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git log git log &lt;file&gt; # 查看该文件每次提交记录</span><br><span class="line"></span><br><span class="line">git log -p &lt;file&gt; # 查看每次详细修改内容的diff</span><br><span class="line"></span><br><span class="line">git log -p -2 # 查看最近两次详细修改内容的diff</span><br><span class="line"></span><br><span class="line">git log --stat #查看提交统计信息</span><br></pre></td></tr></table></figure><p>Mac上可以使用tig代替diff和log，<code>brew install tig</code></p><h3 id="Git-本地分支管理"><a href="#Git-本地分支管理" class="headerlink" title="Git 本地分支管理"></a>Git 本地分支管理</h3><p>查看、切换、创建和删除分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">git br -r # 查看远程分支</span><br><span class="line"></span><br><span class="line">git br &lt;new_branch&gt; # 创建新的分支</span><br><span class="line"></span><br><span class="line">git br -v # 查看各个分支最后提交信息</span><br><span class="line"></span><br><span class="line">git br --merged # 查看已经被合并到当前分支的分支</span><br><span class="line"></span><br><span class="line">git br --no-merged # 查看尚未被合并到当前分支的分支</span><br><span class="line"></span><br><span class="line">git co &lt;branch&gt; # 切换到某个分支</span><br><span class="line"></span><br><span class="line">git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去</span><br><span class="line"></span><br><span class="line">git co -b &lt;new_branch&gt; &lt;branch&gt; # 基于branch创建新的new_branch</span><br><span class="line"></span><br><span class="line">git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span><br><span class="line"></span><br><span class="line">git co $id -b &lt;new_branch&gt; # 把某次历史提交记录checkout出来，创建成一个分支</span><br><span class="line"></span><br><span class="line">git br -d &lt;branch&gt; # 删除某个分支</span><br><span class="line"></span><br><span class="line">git br -D &lt;branch&gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span><br></pre></td></tr></table></figure><p>分支合并和rebase</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt; # 将branch分支合并到当前分支</span><br><span class="line"></span><br><span class="line">git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交</span><br><span class="line"></span><br><span class="line">git rebase master &lt;branch&gt; # 将master rebase到branch，相当于： git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure><h3 id="Git补丁管理-方便在多台机器上开发同步时用"><a href="#Git补丁管理-方便在多台机器上开发同步时用" class="headerlink" title="Git补丁管理(方便在多台机器上开发同步时用)"></a>Git补丁管理(方便在多台机器上开发同步时用)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git diff &gt; ../sync.patch # 生成补丁</span><br><span class="line"></span><br><span class="line">git apply ../sync.patch # 打补丁</span><br><span class="line"></span><br><span class="line">git apply --check ../sync.patch #测试补丁能否成功</span><br></pre></td></tr></table></figure><h3 id="Git暂存管理"><a href="#Git暂存管理" class="headerlink" title="Git暂存管理"></a>Git暂存管理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git stash # 暂存</span><br><span class="line"></span><br><span class="line">git stash list # 列所有stash</span><br><span class="line"></span><br><span class="line">git stash apply # 恢复暂存的内容</span><br><span class="line"></span><br><span class="line">git stash drop # 删除暂存区</span><br></pre></td></tr></table></figure><h3 id="Git远程分支管理"><a href="#Git远程分支管理" class="headerlink" title="Git远程分支管理"></a>Git远程分支管理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">git pull # 抓取远程仓库所有分支更新并合并到本地</span><br><span class="line"></span><br><span class="line">git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span><br><span class="line"></span><br><span class="line">git fetch origin # 抓取远程仓库更新</span><br><span class="line"></span><br><span class="line">git merge origin/master # 将远程主分支合并到本地当前分支</span><br><span class="line"></span><br><span class="line">git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支</span><br><span class="line"></span><br><span class="line">git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上</span><br><span class="line"></span><br><span class="line">git push # push所有分支</span><br><span class="line"></span><br><span class="line">git push origin master # 将本地主分支推到远程主分支</span><br><span class="line"></span><br><span class="line">git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span><br><span class="line"></span><br><span class="line">git push origin &lt;local_branch&gt; # 创建远程分支， origin是远程仓库名</span><br><span class="line"></span><br><span class="line">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; # 创建远程分支</span><br><span class="line"></span><br><span class="line">git push origin :&lt;remote_branch&gt; #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span><br></pre></td></tr></table></figure><h3 id="Git远程仓库管理"><a href="#Git远程仓库管理" class="headerlink" title="Git远程仓库管理"></a>Git远程仓库管理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git remote -v # 查看远程服务器地址和仓库名称</span><br><span class="line"></span><br><span class="line">git remote show origin # 查看远程服务器仓库状态</span><br><span class="line"></span><br><span class="line">git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址</span><br><span class="line"></span><br><span class="line">git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm &lt;repository&gt; # 删除远程仓库</span><br></pre></td></tr></table></figure><p>创建远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库</span><br><span class="line"></span><br><span class="line">scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上</span><br><span class="line"></span><br><span class="line">mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库</span><br><span class="line"></span><br><span class="line">git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址</span><br><span class="line"></span><br><span class="line">git push -u origin master # 客户端首次提交</span><br><span class="line"></span><br><span class="line">git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track</span><br><span class="line"></span><br><span class="line">git remote set-head origin master # 设置远程仓库的HEAD指向master分支</span><br></pre></td></tr></table></figure><p>也可以命令设置跟踪远程库和本地库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream master origin/master</span><br><span class="line"></span><br><span class="line">git branch --set-upstream develop origin/develop</span><br></pre></td></tr></table></figure><h2 id="Git-remote"><a href="#Git-remote" class="headerlink" title="Git remote"></a>Git remote</h2><p>要 参与任何一个 Git 项目的协作,必须要了解该如何管理远程仓库.远程仓库是指托管在网络上的项目仓库,可能会有好多个,其中有些你只能读,另外有些可以写.同他人协作开发某 个项目时,需要管理这些远程仓库,以便推送或拉取数据,分享各自的工作进展.管理远程仓库的工作,包括添加远程库,移除废弃的远程库,管理各式远程库分 支,定义是否跟踪这些分支,等等.本节我们将详细讨论远程库的管理和使用.<br>　　查看当前的远程库</p><p>　　要查看当前配置有哪些远程仓库,可以用 git remote 命令,它会列出每个远程库的简短名字.在克隆完某个项目后,至少可以看到一个名为 origin 的远程库,Git 默认使用这个名字来标识你所克隆的原始仓库:</p><p>　　$ git clone git://github.com/schacon/ticgit.git</p><p>　　Initialized empty Git repository in /private/tmp/ticgit/.git/</p><p>　　remote: Counting objects: 595, done.</p><p>　　remote: Compressing objects: 100% (269/269), done.</p><p>　　remote: Total 595 (delta 255), reused 589 (delta 253)</p><p>　　Receiving objects: 100% (595/595), 73.31 KiB | 1 KiB/s, done.</p><p>　　Resolving deltas: 100% (255/255), done.</p><p>　　$ cd ticgit</p><p>（1）git remote 不带参数，列出已经存在的远程分支</p><p>　　$ git remote</p><p>　　origin</p><p>（2）git remote -v | –verbose 列出详细信息，在每一个名字后面列出其远程url</p><p>此时， -v 选项(译注:此为 –verbose 的简写,取首字母),显示对应的克隆地址:</p><p>　　$ git remote -v</p><p>　　origin git://github.com/schacon/ticgit.git如果有多个远程仓库,此命令将全部列出.比如在我的 Grit 项目中,可以看到:</p><p>　　$ cd grit</p><p>　　$ git remote -v</p><p>　　bakkdoor git://github.com/bakkdoor/grit.git</p><p>　　cho45 git://github.com/cho45/grit.git</p><p>　　defunkt git://github.com/defunkt/grit.git</p><p>　　koke git://github.com/koke/grit.git</p><p>　　origin 这样一来,我就可以非常轻松地从这些用户的仓库中,拉取他们的提交到本地.请注意,上面列出的地址只有 origin 用的是 SSH URL 链接,所以也只有这个仓库我能推送数据上去(我们会在第四章解释原因).</p><p>　　添加远程仓库</p><p>　　要添加一个新的远程仓库,可以指定一个简单的名字,以便将来引用,运行 git remote add [shortname] [url]:</p><p>　　$ git remote</p><p>　　origin</p><p>　　$ git remote add pb git://github.com/paulboone/ticgit.git</p><p>　　$ git remote -v</p><p>　　origin git://github.com/schacon/ticgit.git</p><p>　　pb git://github.com/paulboone/ticgit.git现在可以用字串 pb 指代对应的仓库地址了.比如说,要抓取所有 Paul 有的,但本地仓库没有的信息,可以运行 git fetch pb:</p><p>　　$ git fetch pb</p><p>　　remote: Counting objects: 58, done.</p><p>　　remote: Compressing objects: 100% (41/41), done.</p><p>　　remote: Total 44 (delta 24), reused 1 (delta 0)</p><p>　　Unpacking objects: 100% (44/44), done.</p><p>　　From git://github.com/paulboone/ticgit</p><p>　　* [new branch] master -&gt; pb/master</p><p>　　* [new branch] ticgit -&gt; pb/ticgit</p><p>现在,Paul 的主干分支(master)已经完全可以在本地访问了,对应的名字是 pb/master,你可以将它合并到自己的某个分支,或者切换到这个分支,看看有些什么有趣的更</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>以上内容分别转载自</p><p>[1] <a href="https://blog.csdn.net/wangjia55/article/details/8802490" target="_blank" rel="noopener">git命令之git remote的用法</a></p><p>[2] <a href="https://blog.csdn.net/itmyhome1990/article/details/39579099" target="_blank" rel="noopener">GitHub入门教程</a></p><p>[3] <a href="https://blog.csdn.net/ajianyingxiaoqinghan/article/details/70544159" target="_blank" rel="noopener">Ubuntu环境如何上传项目到GitHub网站？</a></p><p>[4] <a href="http://1ke.co/course/194" target="_blank" rel="noopener">如何使用Git上传项目代码到github</a></p><p>[5] <a href="https://blog.csdn.net/kongbaidepao/article/details/52253774" target="_blank" rel="noopener">git add ， git commit 添加错文件 撤销</a></p><p>[6] <a href="https://www.jianshu.com/p/97341ed9d89e" target="_blank" rel="noopener">撤销 git commit –amend</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;h3 id=&quot;Git-的三种状态&quot;&gt;&lt;a href=&quot;#Git-
      
    
    </summary>
    
    
      <category term="Command" scheme="http://yoursite.com/tags/Command/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Linux Command Learning notes</title>
    <link href="http://yoursite.com/2018/05/03/Linux-Learning-notes/"/>
    <id>http://yoursite.com/2018/05/03/Linux-Learning-notes/</id>
    <published>2018-05-04T00:51:22.000Z</published>
    <updated>2018-05-04T00:53:56.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lsmod"><a href="#lsmod" class="headerlink" title="lsmod"></a>lsmod</h2><p><code>lsmod</code> 命令在 Linux 中用来显示载入系统的功能模块。</p><p>Linux 操作系统的核心具有模块化的特性，因此在编译核心时，无需把全部的功能都放入核心。这些功能被编译成一个个单独的模块，待需要时再分别载入。</p><p>命令格式</p><pre><code>lsmod</code></pre><p>使用示例<br>查看系统已加载的功能模块:</p><pre><code>lsmod</code></pre><p>扩展知识<br>lsmod 命令会输出 4 列数据，每列说代表的意思如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第 1 列表示模块的名称。如 scsi_mod 表示 scsi 模块。</span><br><span class="line">第 2 列表示模块的大小。如 130637 表示 scsi_mod 模块的大小为 130637 字节。</span><br><span class="line">第 3 列表示依赖模块的个数。如 6 表示有 6 个模块依赖 scsi_mod 模块。</span><br><span class="line">第 4 列表示依赖模块的内容。如 qla2xxx 表示 Qlogic FC HBA 光纤 HBA 卡模块。</span><br></pre></td></tr></table></figure><p>通过 <code>grep</code> 命令的配合，可以方便的查找系统有没有加载指定模块。如:</p><pre><code>lsmod|grep -i ext3</code></pre><p>参考网页<a href="http://linux.zzxworld.com/lsmod.html" target="_blank" rel="noopener">http://linux.zzxworld.com/lsmod.html</a></p><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p><code>grep</code>全称是Global Regular Expression Print，表示全局正则表达式版本</p><p><code>grep</code>可用于shell脚本，因为grep通过返回一个状态值来说明搜索的状态，如果模板搜索成功，则返回0，如果搜索不成功，则返回1，如果搜索的文件不存在，则返回2。我们利用这些返回值就可进行一些自动化的文本处理工作。</p><h2 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h2><p>vi是Linux终端下或控制台下常用的编辑器，基本的操作方式为：</p><pre><code>vi /路径/文件名</code></pre><p>例如：vi /etc/fstab表示显示/etc/fstab文件的内容。使用键盘上的Page Up和Page Down键可以上下翻页；按下Insert键，可以见到窗口左下角有“Insert”字样，表示当前为插入编辑状态，这时从键盘输入的内容将插入到光标位置；再按下Insert键，左下角将有“Replace”字样，表示当前为替换编辑状态，这时从键盘输入的内容将替换光标位置的内容。编辑完内容后，按下Esc键，并输入“:wq”，然后回车就可以保存退出。</p><p>如果不想保存而直接退出，则按下Esc键后，输入“:q!”，然后回车即可。“wq”表示Write和Quit，即保存退出；“q!”表示忽略修改强行退出。</p><h2 id="nano"><a href="#nano" class="headerlink" title="nano"></a>nano</h2><pre><code>nano filename.txt</code></pre><p>[Ctrl]-G：取得在线帮助(help)。</p><p>[Ctrl]-X：离开nano软件，若有修改过文件会提示是否需要保存。</p><p>[Ctrl]-O：保存文件，若有权限的话就可以保存文件了。</p><p>[Ctrl]-R：从其他文件读入数据，可以将某个文件的内容贴在本文件中。 </p><p>[Ctrl]-W：查询字符串。[Ctrl]-C：说明目前光标所在处的行数与列数等信息。</p><p>[Ctrl]-_：可以直接输入行号，让光标快速移动到该行。</p><p>[Alt]-Y：校正语法功能开启或关闭(单击开，再单击关)。</p><p>[Alt]-M：可以支持鼠标来移动光标的功能。</p><h2 id="Linux-终止脚本进程"><a href="#Linux-终止脚本进程" class="headerlink" title="Linux 终止脚本进程"></a>Linux 终止脚本进程</h2><p>当<code>ctrl+C</code>没有用时，可以用<code>ps -ef | grep 进程名</code> 查出进程，然后kill该进程。</p><p>kill 的用法：<code>kill［信号代码］进程ID</code></p><p>注：信号代码可以省略；我们常用的信号代码是 -9 ，表示强制终止；</p><p><img src="/2018/05/03/Linux-Learning-notes/kill.png" alt="kill"></p><p>参考网页 <a href="https://blog.csdn.net/LY_Dengle/article/details/53997450" target="_blank" rel="noopener">linux停止正在执行脚本</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;lsmod&quot;&gt;&lt;a href=&quot;#lsmod&quot; class=&quot;headerlink&quot; title=&quot;lsmod&quot;&gt;&lt;/a&gt;lsmod&lt;/h2&gt;&lt;p&gt;&lt;code&gt;lsmod&lt;/code&gt; 命令在 Linux 中用来显示载入系统的功能模块。&lt;/p&gt;
&lt;p&gt;Linux 
      
    
    </summary>
    
    
      <category term="Command" scheme="http://yoursite.com/tags/Command/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Mapillary Vistas Dataset</title>
    <link href="http://yoursite.com/2018/05/02/Mapillary-Vistas-Dataset/"/>
    <id>http://yoursite.com/2018/05/02/Mapillary-Vistas-Dataset/</id>
    <published>2018-05-02T16:52:13.000Z</published>
    <updated>2018-05-02T17:17:58.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mapillary-Vistas-Dataset-Overview"><a href="#Mapillary-Vistas-Dataset-Overview" class="headerlink" title="Mapillary Vistas Dataset Overview"></a>Mapillary Vistas Dataset Overview</h2><ul><li><p>25,000 high-resolution images (split into 18,000 for training, 2,000 for validation, 5,000 for testing; at an average resolution of ~9 megapixels) with pixel-wise annotations from &gt;2 million manually drawn polygons</p></li><li><p>100 object categories, 60 of those instance-specific (i.e. to enumerate objects)</p></li><li><p>Global geographic reach, covering North and South America, Europe, Africa, Asia, and Oceania</p></li><li><p>High variability in weather conditions (sun, rain, snow, fog, haze) and capturing times (dawn, daylight, dusk, and even night)</p></li><li><p>Broad range of camera sensors, varying focal length, image aspect ratios, and different types of camera noise</p></li><li><p>Different capturing viewpoints (from road, sidewalks, and off-road)</p></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://blog.mapillary.com/product/2017/05/03/mapillary-vistas-dataset.html" target="_blank" rel="noopener">https://blog.mapillary.com/product/2017/05/03/mapillary-vistas-dataset.html</a></p><h2 id="Read-me"><a href="#Read-me" class="headerlink" title="Read me"></a>Read me</h2><p>The public set comprises <strong>20,000</strong> images, out of which <strong>18,000</strong> shall be used for <strong>training</strong> and the remaining <strong>2,000</strong> for <strong>validation</strong>. The official <strong>test set</strong> contains <strong>5,000</strong> RGB images, which will be released separately. We provide pixel-wise labels based on polygon annotations for <strong>66 object classes</strong>, where <strong>37</strong> are annotated in an <strong>instance-specific manner</strong> (i.e. individual instances are labeled separately). The folder structures contain raw RGB images ({training,validation}/images), <strong>class-specific labels</strong> for semantic segmentation (8-bit) (<code>{training,validation}/labels</code>) and <strong>instance-specific annotations</strong> (16-bit) (<code>{training,validation}/instances</code>). Please run ‘python demo.py’ from the extracted folder to get an idea about how to access label information and for mappings between label IDs and category names.</p><p>There are 66 labels in the config file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">                    Bird ( 0): animal--bird                                       has instances: True</span><br><span class="line">           Ground Animal ( 1): animal--ground-animal                              has instances: True</span><br><span class="line">                    Curb ( 2): construction--barrier--curb                        has instances: False</span><br><span class="line">                   Fence ( 3): construction--barrier--fence                       has instances: False</span><br><span class="line">              Guard Rail ( 4): construction--barrier--guard-rail                  has instances: False</span><br><span class="line">                 Barrier ( 5): construction--barrier--other-barrier               has instances: False</span><br><span class="line">                    Wall ( 6): construction--barrier--wall                        has instances: False</span><br><span class="line">               Bike Lane ( 7): construction--flat--bike-lane                      has instances: False</span><br><span class="line">       Crosswalk - Plain ( 8): construction--flat--crosswalk-plain                has instances: True</span><br><span class="line">                Curb Cut ( 9): construction--flat--curb-cut                       has instances: False</span><br><span class="line">                 Parking (10): construction--flat--parking                        has instances: False</span><br><span class="line">         Pedestrian Area (11): construction--flat--pedestrian-area                has instances: False</span><br><span class="line">              Rail Track (12): construction--flat--rail-track                     has instances: False</span><br><span class="line">                    Road (13): construction--flat--road                           has instances: False</span><br><span class="line">            Service Lane (14): construction--flat--service-lane                   has instances: False</span><br><span class="line">                Sidewalk (15): construction--flat--sidewalk                       has instances: False</span><br><span class="line">                  Bridge (16): construction--structure--bridge                    has instances: False</span><br><span class="line">                Building (17): construction--structure--building                  has instances: False</span><br><span class="line">                  Tunnel (18): construction--structure--tunnel                    has instances: False</span><br><span class="line">                  Person (19): human--person                                      has instances: True</span><br><span class="line">               Bicyclist (20): human--rider--bicyclist                            has instances: True</span><br><span class="line">            Motorcyclist (21): human--rider--motorcyclist                         has instances: True</span><br><span class="line">             Other Rider (22): human--rider--other-rider                          has instances: True</span><br><span class="line">Lane Marking - Crosswalk (23): marking--crosswalk-zebra                           has instances: True</span><br><span class="line">  Lane Marking - General (24): marking--general                                   has instances: False</span><br><span class="line">                Mountain (25): nature--mountain                                   has instances: False</span><br><span class="line">                    Sand (26): nature--sand                                       has instances: False</span><br><span class="line">                     Sky (27): nature--sky                                        has instances: False</span><br><span class="line">                    Snow (28): nature--snow                                       has instances: False</span><br><span class="line">                 Terrain (29): nature--terrain                                    has instances: False</span><br><span class="line">              Vegetation (30): nature--vegetation                                 has instances: False</span><br><span class="line">                   Water (31): nature--water                                      has instances: False</span><br><span class="line">                  Banner (32): object--banner                                     has instances: True</span><br><span class="line">                   Bench (33): object--bench                                      has instances: True</span><br><span class="line">               Bike Rack (34): object--bike-rack                                  has instances: True</span><br><span class="line">               Billboard (35): object--billboard                                  has instances: True</span><br><span class="line">             Catch Basin (36): object--catch-basin                                has instances: True</span><br><span class="line">             CCTV Camera (37): object--cctv-camera                                has instances: True</span><br><span class="line">            Fire Hydrant (38): object--fire-hydrant                               has instances: True</span><br><span class="line">            Junction Box (39): object--junction-box                               has instances: True</span><br><span class="line">                 Mailbox (40): object--mailbox                                    has instances: True</span><br><span class="line">                 Manhole (41): object--manhole                                    has instances: True</span><br><span class="line">             Phone Booth (42): object--phone-booth                                has instances: True</span><br><span class="line">                 Pothole (43): object--pothole                                    has instances: False</span><br><span class="line">            Street Light (44): object--street-light                               has instances: True</span><br><span class="line">                    Pole (45): object--support--pole                              has instances: True</span><br><span class="line">      Traffic Sign Frame (46): object--support--traffic-sign-frame                has instances: True</span><br><span class="line">            Utility Pole (47): object--support--utility-pole                      has instances: True</span><br><span class="line">           Traffic Light (48): object--traffic-light                              has instances: True</span><br><span class="line">     Traffic Sign (Back) (49): object--traffic-sign--back                         has instances: True</span><br><span class="line">    Traffic Sign (Front) (50): object--traffic-sign--front                        has instances: True</span><br><span class="line">               Trash Can (51): object--trash-can                                  has instances: True</span><br><span class="line">                 Bicycle (52): object--vehicle--bicycle                           has instances: True</span><br><span class="line">                    Boat (53): object--vehicle--boat                              has instances: True</span><br><span class="line">                     Bus (54): object--vehicle--bus                               has instances: True</span><br><span class="line">                     Car (55): object--vehicle--car                               has instances: True</span><br><span class="line">                 Caravan (56): object--vehicle--caravan                           has instances: True</span><br><span class="line">              Motorcycle (57): object--vehicle--motorcycle                        has instances: True</span><br><span class="line">                On Rails (58): object--vehicle--on-rails                          has instances: False</span><br><span class="line">           Other Vehicle (59): object--vehicle--other-vehicle                     has instances: True</span><br><span class="line">                 Trailer (60): object--vehicle--trailer                           has instances: True</span><br><span class="line">                   Truck (61): object--vehicle--truck                             has instances: True</span><br><span class="line">            Wheeled Slow (62): object--vehicle--wheeled-slow                      has instances: True</span><br><span class="line">               Car Mount (63): void--car-mount                                    has instances: False</span><br><span class="line">             Ego Vehicle (64): void--ego-vehicle                                  has instances: False</span><br><span class="line">               Unlabeled (65): void--unlabeled                                    has instances: False</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mapillary-Vistas-Dataset-Overview&quot;&gt;&lt;a href=&quot;#Mapillary-Vistas-Dataset-Overview&quot; class=&quot;headerlink&quot; title=&quot;Mapillary Vistas Dataset O
      
    
    </summary>
    
    
      <category term="Dataset" scheme="http://yoursite.com/tags/Dataset/"/>
    
      <category term="Mapillary Vistas" scheme="http://yoursite.com/tags/Mapillary-Vistas/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow and Python Learning Notes</title>
    <link href="http://yoursite.com/2018/05/02/Tensorflow-Learning-Notes/"/>
    <id>http://yoursite.com/2018/05/02/Tensorflow-Learning-Notes/</id>
    <published>2018-05-02T15:39:47.000Z</published>
    <updated>2018-05-04T00:57:39.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="glob-–-Filename-pattern-matching"><a href="#glob-–-Filename-pattern-matching" class="headerlink" title="glob – Filename pattern matching"></a>glob – Filename pattern matching</h2><h3 id="tf-gfile-Glob"><a href="#tf-gfile-Glob" class="headerlink" title="tf.gfile.Glob"></a>tf.gfile.Glob</h3><pre><code>tf.gfile.Glob(filename)</code></pre><p>Returns a list of files that match the given pattern(s).</p><p>Args:</p><ul><li>filename: string or iterable of strings. The glob pattern(s).</li></ul><p>Returns:</p><ul><li>A list of strings containing filenames that match the given pattern(s).</li></ul><p>Reference:</p><ul><li><a href="https://www.tensorflow.org/api_docs/python/tf/gfile/Glob" target="_blank" rel="noopener">https://www.tensorflow.org/api_docs/python/tf/gfile/Glob</a></li></ul><h3 id="Example-Data"><a href="#Example-Data" class="headerlink" title="Example Data"></a>Example Data</h3><p>The examples below assume the following test files are present in the current working directory:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ python glob_maketestdata.py</span><br><span class="line"></span><br><span class="line">dir</span><br><span class="line">dir/file.txt</span><br><span class="line">dir/file1.txt</span><br><span class="line">dir/file2.txt</span><br><span class="line">dir/filea.txt</span><br><span class="line">dir/fileb.txt</span><br><span class="line">dir/subdir</span><br><span class="line">dir/subdir/subfile.txt</span><br></pre></td></tr></table></figure><p>Note Use <code>glob_maketestdata.py</code> in the sample code to create these files if you want to run the examples.</p><h3 id="Wildcards"><a href="#Wildcards" class="headerlink" title="Wildcards"></a>Wildcards</h3><p>An asterisk (<code>*</code>) matches zero or more characters in a segment of a name. For example, <code>dir/*</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import glob</span><br><span class="line">for name in glob.glob(&apos;dir/*&apos;):</span><br><span class="line">    print name</span><br></pre></td></tr></table></figure><p>The pattern matches every pathname (file or directory) in the directory dir, without recursing further into subdirectories.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ python glob_asterisk.py</span><br><span class="line"></span><br><span class="line">dir/file.txt</span><br><span class="line">dir/file1.txt</span><br><span class="line">dir/file2.txt</span><br><span class="line">dir/filea.txt</span><br><span class="line">dir/fileb.txt</span><br><span class="line">dir/subdir</span><br></pre></td></tr></table></figure><p>To list files in a subdirectory, you must include the subdirectory in the pattern:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import glob</span><br><span class="line"></span><br><span class="line">print &apos;Named explicitly:&apos;</span><br><span class="line">for name in glob.glob(&apos;dir/subdir/*&apos;):</span><br><span class="line">    print &apos;\t&apos;, name</span><br><span class="line"></span><br><span class="line">print &apos;Named with wildcard:&apos;</span><br><span class="line">for name in glob.glob(&apos;dir/*/*&apos;):</span><br><span class="line">    print &apos;\t&apos;, name</span><br></pre></td></tr></table></figure><p>The first case above lists the subdirectory name explicitly, while the second case depends on a wildcard to find the directory.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python glob_subdir.py</span><br><span class="line"></span><br><span class="line">Named explicitly:</span><br><span class="line">        dir/subdir/subfile.txt</span><br><span class="line">Named with wildcard:</span><br><span class="line">        dir/subdir/subfile.txt</span><br></pre></td></tr></table></figure><p>The results, in this case, are the same. If there was another subdirectory, the wildcard would match both subdirectories and include the filenames from both.</p><h3 id="Single-Character-Wildcard"><a href="#Single-Character-Wildcard" class="headerlink" title="Single Character Wildcard"></a>Single Character Wildcard</h3><p>The other wildcard character supported is the question mark (<code>?</code>). It matches any single character in that position in the name. For example,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import glob</span><br><span class="line"></span><br><span class="line">for name in glob.glob(&apos;dir/file?.txt&apos;):</span><br><span class="line">    print name</span><br></pre></td></tr></table></figure><p>Matches all of the filenames which begin with “file”, have one more character of any type, then end with ”<code>.txt</code>”.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python glob_question.py</span><br><span class="line"></span><br><span class="line">dir/file1.txt</span><br><span class="line">dir/file2.txt</span><br><span class="line">dir/filea.txt</span><br><span class="line">dir/fileb.txt</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://pymotw.com/2/glob/" target="_blank" rel="noopener">https://pymotw.com/2/glob/</a></li></ul><h2 id="Tensorflow-slim-TF-Slim"><a href="#Tensorflow-slim-TF-Slim" class="headerlink" title="Tensorflow slim (TF-Slim)"></a>Tensorflow slim (TF-Slim)</h2><ul><li><a href="https://blog.csdn.net/mao_xiao_feng/article/details/73409975" target="_blank" rel="noopener">【Tensorflow】辅助工具篇——tensorflow slim(TF-Slim)介绍</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;glob-–-Filename-pattern-matching&quot;&gt;&lt;a href=&quot;#glob-–-Filename-pattern-matching&quot; class=&quot;headerlink&quot; title=&quot;glob – Filename pattern matc
      
    
    </summary>
    
    
      <category term="Command" scheme="http://yoursite.com/tags/Command/"/>
    
      <category term="Tensorflow" scheme="http://yoursite.com/tags/Tensorflow/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Deeplab v3+ 在cityscapes数据集上测试笔记</title>
    <link href="http://yoursite.com/2018/04/30/Deeplab-v3-training/"/>
    <id>http://yoursite.com/2018/04/30/Deeplab-v3-training/</id>
    <published>2018-04-30T22:00:46.000Z</published>
    <updated>2018-05-09T03:08:52.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ubuntu16-04下Cuda安装"><a href="#Ubuntu16-04下Cuda安装" class="headerlink" title="Ubuntu16.04下Cuda安装"></a>Ubuntu16.04下Cuda安装</h2><p>为了让tensorflow在GPU下运行，需要安装cuda和cudnn。（太懒了，不想写）</p><p>参考网页 <a href="https://blog.csdn.net/QLULIBIN/article/details/78714596" target="_blank" rel="noopener">Ubuntu 16.04 上安装 CUDA 9.0 详细教程</a></p><h2 id="DeepLab的准备、训练、测试"><a href="#DeepLab的准备、训练、测试" class="headerlink" title="DeepLab的准备、训练、测试"></a>DeepLab的准备、训练、测试</h2><h3 id="参考网页"><a href="#参考网页" class="headerlink" title="参考网页"></a>参考网页</h3><p>[1] <a href="https://github.com/tensorflow/models/tree/master/research/deeplab" target="_blank" rel="noopener">Deeplab v3 Github</a></p><p>[2] <a href="https://blog.csdn.net/qq_32799915/article/details/80070711" target="_blank" rel="noopener">图像语义分割 DeepLab v3+ 训练自己的数据集</a></p><p>[3] <a href="https://lijiancheng0614.github.io/2018/03/13/2018_03_13_TensorFlow-DeepLab/" target="_blank" rel="noopener">使用TensorFlow DeepLab进行语义分割</a></p><p>[4] <a href="https://github.com/tensorflow/models/blob/master/research/deeplab/g3doc/cityscapes.md" target="_blank" rel="noopener">Github: Running DeepLab on Cityscapes Semantic Segmentation Dataset</a></p><p>第2、3篇文章都是对voc数据集进行训练，大概参考这两篇文章，然后根据第4篇github上的instruction稍加修改，就可以训练了。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h4 id="1-测试本地环境"><a href="#1-测试本地环境" class="headerlink" title="1 测试本地环境"></a>1 测试本地环境</h4><p>首先添加slim路径，每次打开terminal都要加载路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># From tensorflow/models/research/  </span><br><span class="line">export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim</span><br></pre></td></tr></table></figure><p>Quick test by running model_test.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># From tensorflow/models/research/</span><br><span class="line">python deeplab/model_test.py</span><br></pre></td></tr></table></figure><p>Quick running the whole code on the PASCAL VOC 2012 dataset:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># From tensorflow/models/research/deeplab</span><br><span class="line">sh local_test.sh</span><br></pre></td></tr></table></figure><p>如果都运行成功，说明本地环境已经可以了，接下来训练自己的数据集。</p><h4 id="2-生成tfrecord格式的数据"><a href="#2-生成tfrecord格式的数据" class="headerlink" title="2 生成tfrecord格式的数据"></a>2 生成tfrecord格式的数据</h4><p>首先在<a href="https://github.com/mcordts/cityscapesScripts" target="_blank" rel="noopener">The Cityscapes Dataset Github</a>下载<code>Cityscapesscripts</code>，按照<code>convert_cityscapes.sh</code>文件中提到的文件放置顺序放到<code>models/research/deeplab/datasets</code>文件路径下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># The folder structure is assumed to be:</span><br><span class="line">#  + datasets</span><br><span class="line">#    - build_cityscapes_data.py</span><br><span class="line">#    - convert_cityscapes.sh</span><br><span class="line">#    + cityscapes</span><br><span class="line">#      + cityscapesscripts (downloaded scripts)</span><br><span class="line">#      + gtFine</span><br><span class="line">#      + leftImg8bit</span><br></pre></td></tr></table></figure><p>运行如下语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># From the ./models/research/deeplab/datasets directory.</span><br><span class="line">sh convert_cityscapes.sh</span><br></pre></td></tr></table></figure><p>转换后的dataset会存储在 <code>./deeplab/datasets/cityscapes/tfrecord</code>。</p><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><p>训练与测试部分主要参考文章 <a href="https://lijiancheng0614.github.io/2018/03/13/2018_03_13_TensorFlow-DeepLab/" target="_blank" rel="noopener">使用TensorFlow DeepLab进行语义分割</a></p><h4 id="0-文件结构"><a href="#0-文件结构" class="headerlink" title="0 文件结构"></a>0 文件结构</h4><p>文件结构参考 PASCAL VOC 2012 官方推荐的文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">deeplab/datasets/pascal_voc_seg</span><br><span class="line">├── exp</span><br><span class="line">│   └── train_on_train_set</span><br><span class="line">│       ├── eval</span><br><span class="line">│       │   └── events.out.tfevents....</span><br><span class="line">│       ├── export</span><br><span class="line">│       │   └── frozen_inference_graph.pb</span><br><span class="line">│       ├── train</span><br><span class="line">│       │   ├── checkpoint</span><br><span class="line">│       │   ├── events.out.tfevents....</span><br><span class="line">│       │   ├── graph.pbtxt</span><br><span class="line">│       │   ├── model.ckpt-0.data-00000-of-00001</span><br><span class="line">│       │   ├── model.ckpt-0.index</span><br><span class="line">│       │   ├── model.ckpt-0.meta</span><br><span class="line">│       │   └── ...</span><br><span class="line">│       └── vis</span><br><span class="line">│           ├── graph.pbtxt</span><br><span class="line">│           ├── raw_segmentation_results</span><br><span class="line">│           └── segmentation_results</span><br><span class="line">├── init_models</span><br><span class="line">│   └── deeplabv3_pascal_train_aug</span><br><span class="line">│       ├── frozen_inference_graph.pb</span><br><span class="line">│       ├── model.ckpt.data-00000-of-00001</span><br><span class="line">│       └── model.ckpt.index</span><br><span class="line">├── tfrecord</span><br><span class="line">│   ├── ....tfrecord</span><br><span class="line">│   └── ...</span><br><span class="line">└── VOCdevkit</span><br><span class="line">    └── VOC2012</span><br><span class="line">        ├── Annotations</span><br><span class="line">        ├── ImageSets</span><br><span class="line">        │   ├── Action</span><br><span class="line">        │   ├── Layout</span><br><span class="line">        │   ├── Main</span><br><span class="line">        │   └── Segmentation</span><br><span class="line">        ├── JPEGImages</span><br><span class="line">        ├── SegmentationClass</span><br><span class="line">        ├── SegmentationClassRaw</span><br><span class="line">        └── SegmentationObject</span><br></pre></td></tr></table></figure><p>Cityscapes 的文件结构如下，需要结合一下VOC的结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ datasets</span><br><span class="line">  + cityscapes</span><br><span class="line">    + leftImg8bit</span><br><span class="line">    + gtFine</span><br><span class="line">    + tfrecord</span><br><span class="line">    + exp</span><br><span class="line">      + train_on_train_set</span><br><span class="line">        + train</span><br><span class="line">        + eval</span><br><span class="line">        + vis</span><br></pre></td></tr></table></figure><h4 id="1-下载模型"><a href="#1-下载模型" class="headerlink" title="1 下载模型"></a>1 下载模型</h4><p>官方提供了不少预训练模型</p><p><a href="https://github.com/tensorflow/models/blob/master/research/deeplab/g3doc/model_zoo.md" target="_blank" rel="noopener">https://github.com/tensorflow/models/blob/master/research/deeplab/g3doc/model_zoo.md</a> </p><p>这里以 <code>deeplabv3_pascal_train_aug_2018_01_04</code> 为例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># From deeplab/datasets/cityscapes/</span><br><span class="line">mkdir init_models</span><br><span class="line">cd init_models</span><br><span class="line">wget http://download.tensorflow.org/models/deeplabv3_cityscapes_train_2018_02_06.tar.gz</span><br><span class="line">tar zxf deeplabv3_cityscapes_train_2018_02_06.tar.gz</span><br></pre></td></tr></table></figure><p>由于我是应用在cityscapes，下载的是cityscapes部分的<code>xception_65</code>。</p><h4 id="2-训练"><a href="#2-训练" class="headerlink" title="2 训练"></a>2 训练</h4><p>新建 <code>deeplab/datasets/cityscapes/exp/train_on_train_set/train.sh</code>，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p logs/</span><br><span class="line">export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim</span><br><span class="line">now=$(date +&quot;%Y%m%d_%H%M%S&quot;)</span><br><span class="line">python ../../../../train.py \</span><br><span class="line">    --logtostderr \</span><br><span class="line">    --training_number_of_steps=90000 \</span><br><span class="line">    --train_split=&quot;train&quot; \</span><br><span class="line">    --model_variant=&quot;xception_65&quot; \</span><br><span class="line">    --atrous_rates=6 \</span><br><span class="line">    --atrous_rates=12 \</span><br><span class="line">    --atrous_rates=18 \</span><br><span class="line">    --output_stride=16 \</span><br><span class="line">    --decoder_output_stride=4 \</span><br><span class="line">    --train_crop_size=769 \</span><br><span class="line">    --train_crop_size=769 \</span><br><span class="line">    --train_batch_size=2 \</span><br><span class="line">    --num_clones=2 \</span><br><span class="line">    --dataset=&quot;cityscapes&quot; \</span><br><span class="line">    --fine_tune_batch_norm=false \</span><br><span class="line">    --tf_initial_checkpoint=&quot;../../init_models/deeplabv3_cityscapes_train/model.ckpt&quot; \</span><br><span class="line">    --train_logdir=&quot;train/&quot; \</span><br><span class="line">    --dataset_dir=&quot;../../tfrecord/&quot; 2&gt;&amp;1 | tee logs/train_$now.txt &amp;</span><br></pre></td></tr></table></figure><p>进入 <code>deeplab/datasets/cityscapes/exp/train_on_train_set/</code>，</p><p>运行 <code>sh train.sh</code> 即可训练。</p><h4 id="3-验证"><a href="#3-验证" class="headerlink" title="3 验证"></a>3 验证</h4><p>可一边训练一边验证，注意使用其它的GPU或合理分配显存。</p><p>新建 <code>deeplab/datasets/cityscapes/exp/train_on_train_set/eval.sh</code>，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">python ../../../../eval.py \</span><br><span class="line">    --logtostderr \</span><br><span class="line">    --eval_split=&quot;val&quot; \</span><br><span class="line">    --model_variant=&quot;xception_65&quot; \</span><br><span class="line">    --atrous_rates=6 \</span><br><span class="line">    --atrous_rates=12 \</span><br><span class="line">    --atrous_rates=18 \</span><br><span class="line">    --output_stride=16 \</span><br><span class="line">    --decoder_output_stride=4 \</span><br><span class="line">    --eval_crop_size=1025 \</span><br><span class="line">    --eval_crop_size=2049 \</span><br><span class="line">    --dataset=&quot;cityscapes&quot; \</span><br><span class="line">    --checkpoint_dir=&quot;train/&quot; \</span><br><span class="line">    --eval_logdir=&quot;eval/&quot; \</span><br><span class="line">    --dataset_dir=&quot;../../tfrecord/&quot; &amp;</span><br><span class="line">    # --max_number_of_evaluations=1 &amp;</span><br></pre></td></tr></table></figure><p>进入 <code>deeplab/datasets/cityscapes/exp/train_on_train_set/</code>，</p><p>运行 <code>CUDA_VISIBLE_DEVICES=&quot;1&quot; sh eval.sh</code> 即可验证（这里指定了第二个 GPU）。</p><h4 id="4-可视化-log"><a href="#4-可视化-log" class="headerlink" title="4 可视化 log"></a>4 可视化 log</h4><p>可一边训练一边可视化训练的 log，访问 <a href="http://localhost:6006/" target="_blank" rel="noopener">http://localhost:6006/</a> 即可看到 loss 等的变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># From deeplab/datasets/cityscapes/exp/train_on_train_set</span><br><span class="line">tensorboard --logdir train/</span><br></pre></td></tr></table></figure><p>可视化验证的 log，可看到 miou_1.0 的变化，这里指定了另一个端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># From deeplab/datasets/cityscapes/exp/train_on_train_set</span><br><span class="line">tensorboard --logdir eval/ --port 6007</span><br></pre></td></tr></table></figure><p>或同时可视化训练与验证的log：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># From deeplab/datasets/cityscapes/exp/train_on_train_set</span><br><span class="line">tensorboard --logdir .</span><br></pre></td></tr></table></figure><h4 id="5-可视化分割结果"><a href="#5-可视化分割结果" class="headerlink" title="5 可视化分割结果"></a>5 可视化分割结果</h4><p>可一边训练一边可视化分割结果。</p><p>新建 <code>deeplab/datasets/cityscapes/exp/train_on_train_set/vis.sh</code>，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">python ../../../../vis.py \</span><br><span class="line">    --logtostderr \</span><br><span class="line">    --vis_split=&quot;val&quot; \</span><br><span class="line">    --model_variant=&quot;xception_65&quot; \</span><br><span class="line">    --atrous_rates=6 \</span><br><span class="line">    --atrous_rates=12 \</span><br><span class="line">    --atrous_rates=18 \</span><br><span class="line">    --output_stride=16 \</span><br><span class="line">    --decoder_output_stride=4 \</span><br><span class="line">    --vis_crop_size=1025 \</span><br><span class="line">    --vis_crop_size=2049 \</span><br><span class="line">    --dataset=&quot;cityscapes&quot; \</span><br><span class="line">    --colormap_type=&quot;cityscapes&quot; \</span><br><span class="line">    --checkpoint_dir=&quot;train/&quot; \</span><br><span class="line">    --vis_logdir=&quot;vis/&quot; \</span><br><span class="line">    --dataset_dir=&quot;../../tfrecord/&quot; &amp;</span><br></pre></td></tr></table></figure><p>进入 <code>deeplab/datasets/cityscapes/exp/train_on_train_set/</code>，</p><p>运行 <code>sh vis.sh</code> 即可生成分割结果，<code>vis/segmentation_results/</code> 里有彩色化的分割结果，<code>vis/raw_segmentation_results/</code> 里有原始的分割结果。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="1-导出模型"><a href="#1-导出模型" class="headerlink" title="1 导出模型"></a>1 导出模型</h4><p>训练完成后得到一些 checkpoint 文件在 <code>deeplab/datasets/cityscapes/exp/train_on_train_set/train/</code> 中，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph.pbtxt</span><br><span class="line">model.ckpt-1000.data-00000-of-00001</span><br><span class="line">model.ckpt-1000.info</span><br><span class="line">model.ckpt-1000.meta</span><br></pre></td></tr></table></figure><p>其中 meta 文件保存了 graph 和 metadata，ckpt 文件保存了网络的 weights。</p><p>而进行预测时只需模型和权重，不需要 metadata，故可使用官方提供的脚本生成推导图。</p><p>新建 <code>deeplab/datasets/cityscapes/exp/train_on_train_set/export_model.sh</code>，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">python ../../../../export_model.py \</span><br><span class="line">    --logtostderr \</span><br><span class="line">    --checkpoint_path=&quot;train/model.ckpt-$1&quot; \</span><br><span class="line">    --export_path=&quot;export/frozen_inference_graph-$1.pb&quot; \</span><br><span class="line">    --model_variant=&quot;xception_65&quot; \</span><br><span class="line">    --atrous_rates=6 \</span><br><span class="line">    --atrous_rates=12 \</span><br><span class="line">    --atrous_rates=18 \</span><br><span class="line">    --output_stride=16 \</span><br><span class="line">    --decoder_output_stride=4 \</span><br><span class="line">    --num_classes=19 \</span><br><span class="line">    --crop_size=769 \</span><br><span class="line">    --crop_size=769 \</span><br><span class="line">    --inference_scales=1.0</span><br></pre></td></tr></table></figure><p>进入 <code>deeplab/datasets/pascal_voc_seg/exp/train_on_train_set/</code>，</p><p>运行 <code>sh export_model.sh 1000</code> 即可导出模型 <code>export/frozen_inference_graph-1000.pb</code>。</p><h4 id="2-测试图片"><a href="#2-测试图片" class="headerlink" title="2 测试图片"></a>2 测试图片</h4><p>运行 <code>deeplab_demo.ipynb</code> 并修改其中的各种路径即可。</p><p>或自写 <code>inference</code> 脚本，如 <code>deeplab/datasets/cityscapes/exp/train_on_train_set/infer.py</code>。（不太确定label 0是不是background，待更）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.path.append(&apos;../../../../utils/&apos;)</span><br><span class="line">from matplotlib import pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">from PIL import Image</span><br><span class="line">import tensorflow as tf</span><br><span class="line">import get_dataset_colormap</span><br><span class="line">LABEL_NAMES = np.asarray([</span><br><span class="line">    &apos;unlabeled&apos;, &apos;road&apos;, &apos;sidewalk&apos;, &apos;building&apos;, &apos;wall&apos;, &apos;fence&apos;, &apos;pole&apos;,</span><br><span class="line">    &apos;traffic light&apos;, &apos;traffic sign&apos;, &apos;vegetation&apos;, &apos;terrain&apos;, &apos;person&apos;, &apos;rider&apos;, &apos;car&apos;, &apos;truck&apos;,</span><br><span class="line">    &apos;bus&apos;, &apos;train&apos;, &apos;motorcycle&apos;, &apos;bicycle&apos;</span><br><span class="line">])</span><br><span class="line">FULL_LABEL_MAP = np.arange(len(LABEL_NAMES)).reshape(len(LABEL_NAMES), 1)</span><br><span class="line">FULL_COLOR_MAP = get_dataset_colormap.label_to_color_image(FULL_LABEL_MAP)</span><br><span class="line">class DeepLabModel(object):</span><br><span class="line">    &quot;&quot;&quot;Class to load deeplab model and run inference.&quot;&quot;&quot;</span><br><span class="line">    INPUT_TENSOR_NAME = &apos;ImageTensor:0&apos;</span><br><span class="line">    OUTPUT_TENSOR_NAME = &apos;SemanticPredictions:0&apos;</span><br><span class="line">    INPUT_SIZE = 769</span><br><span class="line">    def __init__(self, model_path):</span><br><span class="line">        &quot;&quot;&quot;Creates and loads pretrained deeplab model.&quot;&quot;&quot;</span><br><span class="line">        self.graph = tf.Graph()</span><br><span class="line">        with open(model_path) as fd:</span><br><span class="line">            graph_def = tf.GraphDef.FromString(fd.read())</span><br><span class="line">        with self.graph.as_default():</span><br><span class="line">            tf.import_graph_def(graph_def, name=&apos;&apos;)</span><br><span class="line">        self.sess = tf.Session(graph=self.graph)</span><br><span class="line">    def run(self, image):</span><br><span class="line">        &quot;&quot;&quot;Runs inference on a single image.</span><br><span class="line">        Args:</span><br><span class="line">            image: A PIL.Image object, raw input image.</span><br><span class="line">        Returns:</span><br><span class="line">            resized_image: RGB image resized from original input image.</span><br><span class="line">            seg_map: Segmentation map of `resized_image`.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        width, height = image.size</span><br><span class="line">        resize_ratio = 1.0 * self.INPUT_SIZE / max(width, height)</span><br><span class="line">        target_size = (int(resize_ratio * width), int(resize_ratio * height))</span><br><span class="line">        resized_image = image.convert(&apos;RGB&apos;).resize(target_size,</span><br><span class="line">                                                    Image.ANTIALIAS)</span><br><span class="line">        batch_seg_map = self.sess.run(</span><br><span class="line">            self.OUTPUT_TENSOR_NAME,</span><br><span class="line">            feed_dict=&#123;</span><br><span class="line">                self.INPUT_TENSOR_NAME: [np.asarray(resized_image)]</span><br><span class="line">            &#125;)</span><br><span class="line">        seg_map = batch_seg_map[0]</span><br><span class="line">        return resized_image, seg_map</span><br><span class="line">def vis_segmentation(image, seg_map):</span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.subplot(221)</span><br><span class="line">    plt.imshow(image)</span><br><span class="line">    plt.axis(&apos;off&apos;)</span><br><span class="line">    plt.title(&apos;input image&apos;)</span><br><span class="line">    plt.subplot(222)</span><br><span class="line">    seg_image = get_dataset_colormap.label_to_color_image(</span><br><span class="line">        seg_map, get_dataset_colormap.get_pascal_name()).astype(np.uint8)</span><br><span class="line">    plt.imshow(seg_image)</span><br><span class="line">    plt.axis(&apos;off&apos;)</span><br><span class="line">    plt.title(&apos;segmentation map&apos;)</span><br><span class="line">    plt.subplot(223)</span><br><span class="line">    plt.imshow(image)</span><br><span class="line">    plt.imshow(seg_image, alpha=0.7)</span><br><span class="line">    plt.axis(&apos;off&apos;)</span><br><span class="line">    plt.title(&apos;segmentation overlay&apos;)</span><br><span class="line">    unique_labels = np.unique(seg_map)</span><br><span class="line">    ax = plt.subplot(224)</span><br><span class="line">    plt.imshow(</span><br><span class="line">        FULL_COLOR_MAP[unique_labels].astype(np.uint8),</span><br><span class="line">        interpolation=&apos;nearest&apos;)</span><br><span class="line">    ax.yaxis.tick_right()</span><br><span class="line">    plt.yticks(range(len(unique_labels)), LABEL_NAMES[unique_labels])</span><br><span class="line">    plt.xticks([], [])</span><br><span class="line">    ax.tick_params(width=0)</span><br><span class="line">    plt.show()</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    if len(sys.argv) &lt; 3:</span><br><span class="line">        print(&apos;Usage: python &#123;&#125; image_path model_path&apos;.format(sys.argv[0]))</span><br><span class="line">        exit()</span><br><span class="line">    image_path = sys.argv[1]</span><br><span class="line">    model_path = sys.argv[2]</span><br><span class="line">    model = DeepLabModel(model_path)</span><br><span class="line">    orignal_im = Image.open(image_path)</span><br><span class="line">    resized_im, seg_map = model.run(orignal_im)</span><br><span class="line">    vis_segmentation(resized_im, seg_map)</span><br></pre></td></tr></table></figure><p>运行以下命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># From deeplab/datasets/cityscapes/exp/train_on_train_set/</span><br><span class="line">python infer.py \</span><br><span class="line">    ../../../../g3doc/img/image1.jpg \</span><br><span class="line">    export/frozen_inference_graph.pb</span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>小白入门deeplab，遇到好多傻问题，记录一下。</p><h4 id="1-Import-error"><a href="#1-Import-error" class="headerlink" title="1 Import error"></a>1 Import error</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImportError: No module named deeplab</span><br></pre></td></tr></table></figure><p>在<code>models/research/</code>路径下输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim</span><br></pre></td></tr></table></figure><h4 id="2-InvalidArgumentError"><a href="#2-InvalidArgumentError" class="headerlink" title="2 InvalidArgumentError"></a>2 InvalidArgumentError</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InvalidArgumentError (see above for traceback): Assign requires shapes of both tensors to match. lhs shape= [21] rhs shape= [19]</span><br></pre></td></tr></table></figure><p>这是因为最后的<code>num_classes</code>和    <code>init model</code>的<code>num_classes</code>不一致导致的。我这里是因为忘记把dataset改成cityscapes了。因为在<code>segmenation_dataset.py</code>里面voc的<code>num_classes</code>是21，我的<code>init model</code>的<code>num_classes</code>是cityscapes的，是19，所以会不match。</p><p>在写<code>train.sh</code>文件的时候，加入下面这一行就解决了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--dataset=&quot;cityscapes&quot; \</span><br></pre></td></tr></table></figure><h4 id="3-Linux终止脚本进程"><a href="#3-Linux终止脚本进程" class="headerlink" title="3 Linux终止脚本进程"></a>3 Linux终止脚本进程</h4><p>当<code>ctrl+C</code>没有用时，可以用<code>ps -ef | grep 进程名</code> 查出进程，然后kill该进程。</p><p>kill 的用法：<code>kill［信号代码］进程ID</code></p><p>注：信号代码可以省略；我们常用的信号代码是 -9 ，表示强制终止；</p><p><img src="/2018/04/30/Deeplab-v3-training/kill.png" alt="kill"></p><p>参考网页 <a href="https://blog.csdn.net/LY_Dengle/article/details/53997450" target="_blank" rel="noopener">linux停止正在执行脚本</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ubuntu16-04下Cuda安装&quot;&gt;&lt;a href=&quot;#Ubuntu16-04下Cuda安装&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu16.04下Cuda安装&quot;&gt;&lt;/a&gt;Ubuntu16.04下Cuda安装&lt;/h2&gt;&lt;p&gt;为了让ten
      
    
    </summary>
    
    
      <category term="Cityscapes" scheme="http://yoursite.com/tags/Cityscapes/"/>
    
      <category term="Deeplab v3+" scheme="http://yoursite.com/tags/Deeplab-v3/"/>
    
      <category term="train" scheme="http://yoursite.com/tags/train/"/>
    
  </entry>
  
  <entry>
    <title>Cityscapes Dataset</title>
    <link href="http://yoursite.com/2018/04/30/Cityscapes-Dataset/"/>
    <id>http://yoursite.com/2018/04/30/Cityscapes-Dataset/</id>
    <published>2018-04-30T18:08:22.000Z</published>
    <updated>2018-05-04T00:59:13.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cityscapes-Dataset"><a href="#Cityscapes-Dataset" class="headerlink" title="Cityscapes Dataset"></a>Cityscapes Dataset</h2><p>该github库包含用于检查，准备和评估Cityscapes数据集的脚本。 该大型数据集包含来自50个不同城市的街道场景中记录的多种立体视频序列，除了20000个弱注释帧以外，还包含5000帧高质量像素级注释。</p><p>详细信息和下载链接请登录：<a href="www.cityscapes-dataset.net">www.cityscapes-dataset.net</a></p><p>数据库介绍英文网址：<a href="https://github.com/mcordts/cityscapesScripts" target="_blank" rel="noopener">https://github.com/mcordts/cityscapesScripts</a></p><p>以下翻译均来自：<a href="https://blog.csdn.net/chishuideyu/article/details/79963072" target="_blank" rel="noopener">https://blog.csdn.net/chishuideyu/article/details/79963072</a></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>Cityscapes dataset 的文件夹结构如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;root&#125;/&#123;type&#125;&#123;video&#125;/&#123;split&#125;/&#123;city&#125;/&#123;city&#125;_&#123;seq:0&gt;6&#125;_&#123;frame:0&gt;6&#125;_&#123;type&#125;&#123;ext&#125;</span><br></pre></td></tr></table></figure><p>其中独立元素的含义是:</p><ul><li><p><code>root Cityscapes</code>数据集的根文件夹。 我们的许多脚本检查指向该文件夹的环境变量“CITYSCAPES_DATASET”是否存在，并将其作为默认目录。</p></li><li><p><code>type</code> 数据类型或形态，比如 <code>gtFine</code> 代表精细的GroundTruth， <code>leftImg8bit</code> 代表左侧相机的八位图像。</p></li><li><p><code>split</code> 分割，即 train， val， test， train_extra或demoVideo。 请注意，并非所有分组都存在所有类型的数据。 因此，偶尔找到空文件夹不要感到惊讶。</p></li><li><p><code>city</code> 这部分数据集的所属城市。</p></li><li><p><code>seq</code> 序列号，使用6位数字。</p></li><li><p><code>frame</code> 帧号，使用6位数字。 请注意，在一些城市中，虽然记录了非常长的序列，但在一些城市记录了许多短序列，其中仅记录了第19帧.</p></li><li><p><code>ext</code> 该文件的扩展名和可选的后缀，例如， <code>_polygons.json</code>为GroundTruth文件</p></li></ul><p><code>type</code>可能的值</p><ul><li><p><code>gtFine</code> 精细注释，2975张训练图，500张验证图和1525张测试图。 这种类型的注释用于验证，测试和可选的训练。 注解使用包含单个多边形的“json”文件进行编码。 另外，我们提供<code>png</code>图像，其中像素值对标签进行编码。 有关详细信息，请参阅<code>helpers / labels.py</code>和<code>prepare</code>中的脚本。</p></li><li><p><code>gtCoarse</code> 粗略注释，可用于所有训练和验证图像以及另一组19998张训练图像（<code>train_extra</code>）。 这些注释可以用于训练，也可以与<code>gtFine</code>一起使用，也可以在弱监督的环境中单独使用。</p></li><li><p><code>gtBboxCityPersons</code> 行人边界框注释，可用于所有训练和验证图像。 有关更多详细信息，请参阅<code>helpers / labels_cityPersons.py</code>以及<a href="https://bitbucket.org/shanshanzhang/citypersons" target="_blank" rel="noopener"><code>CityPersons</code>出版物（Zhang等，CVPR’17）</a>。</p></li><li><p><code>leftImg8bit</code> 左侧图像，采用8位LDR格式。这些图像都有标准的注释.</p></li><li><p><code>leftImg16bit</code> 左侧图像，采用16位HDR格式。这些图像提供每像素16位色彩深度并包含更多信息，特别是在场景的非常黑暗或明亮的部分。 警告：图像存储为16位PNG，这是非标准的，并且不是所有库都支持。</p></li><li><p><code>rightImg8bit</code> 右侧图像，采用8位LDR格式。</p></li><li><p><code>rightImg16bit</code> 右侧图像，采用16位HDR格式。</p></li><li><p><code>timestamp</code> 记录时间，单位是<code>ns</code>。 每个序列的第一帧总是有一个0的时间戳。</p></li><li><p><code>disparity</code> 预先计算的视差深度图。 为了获得视差值，对于p&gt; 0的每个像素p计算：<code>d =（float（p）-1）/ 256</code>，而值p = 0是无效测量。 警告：图像存储为16位PNG，这是非标准的，并且不是所有库都支持。</p></li><li><p><code>camera</code> 内部和外部相机校准。</p></li><li><p><code>vehicle</code> 车辆测距，GPS坐标和室外温度。</p></li></ul><p>随着时间的推移可能会增加更多类型，并且并非所有类型都是最初可用的，如果您需要其他元数据来运行您的方法，请告诉我们。</p><p><code>split</code>可能出现的值</p><ul><li><p><code>train</code> 通常用于训练, 包含 2975 张带有粗糙或精细标注的图像</p></li><li><p><code>val</code> 应该用于验证<code>hyper-parameters</code>，包含500个具有精细和粗糙注释的图像。 也可以用于训练.</p></li><li><p><code>test</code> 用于在我们的评估服务器上测试。 注释不公开，但为方便起见，我们包含自我车辆和整改边界的注释。</p></li><li><p><code>train_extra</code> 可以选择性地用于训练，包含带有粗略注释的19998张图像</p></li><li><p><code>demoVideo</code> 可用于定性评估的视频序列，这些视频不提供注释</p></li></ul><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>在名为 <code>scripts</code>的文件夹中有数据集包含几个脚本</p><ul><li><p><code>helpers</code> 被其他脚本文件调用的帮助文件</p></li><li><p><code>viewer</code> 用于查看图像和标注的脚本</p></li><li><p><code>preparation</code> 用于将<code>GroundTruth</code>注释转换为适合您的方法的格式的脚本</p></li><li><p><code>evaluation</code> 评价你的方法的脚本</p></li><li><p><code>annotation</code> 被用来标注数据集的标注工具</p></li></ul><p>请注意，所有文件顶部都有一个小型documentation。 非常重要</p><ul><li><p><code>helpers/labels.py</code> 定义所有语义类ID的中心文件，并提供各种类属性之间的映射。</p></li><li><p><code>helpers/labels_cityPersons.py</code> 文件定义所有CityPersons行人类的ID并提供各种类属性之间的映射。</p></li><li><p><code>viewer/cityscapesViewer.py</code> 查看图像并覆盖注释。</p></li><li><p><code>preparation/createTrainIdLabelImgs.py</code> 将多边形格式的注释转换为带有标签ID的png图像，其中像素编码可以在“labels.py”中定义的“训练ID”。</p></li><li><p><code>preparation/createTrainIdInstanceImgs.py</code> 将多边形格式的注释转换为带有实例ID的png图像，其中像素编码由“train ID”组成的实例ID。</p></li><li><p><code>evaluation/evalPixelLevelSemanticLabeling.py</code> 该脚本来评估验证集上的像素级语义标签结果。该脚本还用于评估测试集的结果。</p></li><li><p><code>evaluation/evalInstanceLevelSemanticLabeling.py</code> 该脚本来评估验证集上的实例级语义标签结果。该脚本还用于评估测试集的结果。</p></li><li><p><code>setup.py</code> 运行 <code>setup.py build_ext --inplace</code> 启用<code>cython</code>插件以进行更快速的评估。仅针对<code>Ubuntu</code>进行了测试。</p></li></ul><p>脚本可以通过 pip安装，如下： </p><pre><code>sudo pip install </code></pre><p>这将脚本安装为名为<code>cityscapesscripts</code>的python模块并公开以下工具，请参阅上面的说明：</p><ul><li>csViewer</li><li>csLabelTool</li><li>csEvalPixelLevelSemanticLabeling</li><li>csEvalInstanceLevelSemanticLabeling</li><li>csCreateTrainIdLabelImgs</li><li>csCreateTrainIdInstanceImgs</li></ul><p>请注意，对于您需要安装的图形工具: </p><pre><code>sudo apt install python-tk python-qt4</code></pre><h2 id="测评"><a href="#测评" class="headerlink" title="测评"></a>测评</h2><p>一旦你想在测试集上测试你的方法，请在你提供的测试图像上运行你的方法并提交你的结果：</p><p><code>www.cityscapes-dataset.net/submit/</code></p><p>对于语义标注，我们要求结果格式与我们的名为<code>labelIDs</code>的标签图像的格式相匹配。<br>因此，您的代码应该生成图像，其中每个像素的值与<code>labels.py</code>中定义的类ID相对应。<br>请注意，我们的评估脚本包含在脚本文件夹中，可用于在验证集上测试您的方法。<br>有关提交过程的更多详细信息，请咨询我们的网站。</p><h2 id="Dataset-Overview"><a href="#Dataset-Overview" class="headerlink" title="Dataset Overview"></a>Dataset Overview</h2><p>The Cityscapes Dataset focuses on semantic understanding of urban street scenes. In the following, we give an overview on the design choices that were made to target the dataset’s focus.</p><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><p>Type of annotations</p><ul><li>Semantic</li><li>Instance-wise</li><li>Dense pixel annotations</li></ul><p>Complexity</p><ul><li>30 classes</li></ul><p>Volume</p><ul><li>5 000 annotated images with fine annotations </li><li>20 000 annotated images with coarse annotations </li></ul><p>Metadata</p><ul><li>Preceding and trailing video frames. Each annotated image is the 20th image from a 30 frame video snippets (1.8s)</li><li>Corresponding right stereo views</li><li>GPS coordinates</li><li>Ego-motion data from vehicle odometry</li><li>Outside temperature from vehicle sensor</li></ul><p>Benchmark suite and evaluation server</p><ul><li>Pixel-level semantic labeling</li><li>Instance-level semantic labeling</li></ul><h3 id="Class-Definitions"><a href="#Class-Definitions" class="headerlink" title="Class Definitions"></a>Class Definitions</h3><p>Please click on the individual classes for details on their definitions.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GroupClasses</span><br><span class="line">flatroad · sidewalk · parking+ · rail track+</span><br><span class="line">humanperson* · rider*</span><br><span class="line">vehiclecar* · truck* · bus* · on rails* · motorcycle* · bicycle* · caravan*+ · trailer*+</span><br><span class="line">constructionbuilding · wall · fence · guard rail+ · bridge+ · tunnel+</span><br><span class="line">objectpole · pole group+ · traffic sign · traffic light</span><br><span class="line">naturevegetation · terrain</span><br><span class="line">skysky</span><br><span class="line">voidground+ · dynamic+ · static+</span><br></pre></td></tr></table></figure><p><code>*</code> Single instance annotations are available. However, if the boundary between such instances cannot be clearly seen, the whole crowd/group is labeled together and annotated as group, e.g. car group.</p><p><code>+</code> This label is not included in any evaluation and treated as void (or in the case of license plate as the vehicle mounted on).</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://www.cityscapes-dataset.com/dataset-overview/" target="_blank" rel="noopener">https://www.cityscapes-dataset.com/dataset-overview/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Cityscapes-Dataset&quot;&gt;&lt;a href=&quot;#Cityscapes-Dataset&quot; class=&quot;headerlink&quot; title=&quot;Cityscapes Dataset&quot;&gt;&lt;/a&gt;Cityscapes Dataset&lt;/h2&gt;&lt;p&gt;该githu
      
    
    </summary>
    
    
      <category term="Cityscapes" scheme="http://yoursite.com/tags/Cityscapes/"/>
    
      <category term="Dataset" scheme="http://yoursite.com/tags/Dataset/"/>
    
  </entry>
  
  <entry>
    <title>How do I build my own blog with Hexo and Github</title>
    <link href="http://yoursite.com/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/"/>
    <id>http://yoursite.com/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/</id>
    <published>2018-04-11T18:01:04.000Z</published>
    <updated>2018-04-11T23:21:59.227Z</updated>
    
    <content type="html"><![CDATA[<p>昨晚熬夜终于搭好了一个属于自己的博客，但是对markdown语法还不是很熟悉，于是决定写一篇搭博客的教程来熟悉一下。前人掉坑，后人绕行。那么，废话不多说，就开始吧！:)</p><p>本文主要是针对 <strong>Mac OS</strong> 系统上基于 <strong>Github</strong> 和 <strong>Hexo</strong> 的博客搭建，<strong>Windows</strong> 系统上的搭建过程类似，但是会略有不同，可以作为参考。</p><h2 id="Github-和-SSH-设置"><a href="#Github-和-SSH-设置" class="headerlink" title="Github 和 SSH 设置"></a>Github 和 SSH 设置</h2><p>博客搭建的大概思路就是用 <strong>Github</strong> 获得免费的域名和空间，然后使用搭建博客的模版 <strong>Hexo</strong> 来让博客更好看。</p><h3 id="注册-Github"><a href="#注册-Github" class="headerlink" title="注册 Github"></a>注册 Github</h3><p>首先去 <a href="https://github.com/" target="_blank" rel="noopener">Github</a> 上注册你的username，建议使用常用邮箱，Github上很多通知都是通过邮箱的。比如你的主页上传并构建成功会通过邮箱通知，更重要的是，如果构建失败的话也会在邮件中说明原因。</p><h3 id="本地SSH-Keys的设置"><a href="#本地SSH-Keys的设置" class="headerlink" title="本地SSH Keys的设置"></a>本地SSH Keys的设置</h3><p>我们需要通过SSH来让本地编辑的内容托管到Github，所以要对先SSH进行设置。</p><p>首先检查电脑上现有的SSH Keys，在Terminal输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh</span><br></pre></td></tr></table></figure><p>输入 <code>ls</code> 查看是否有ssh keys。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br></pre></td></tr></table></figure><p>如果只显示一个 <code>known_hosts</code> ，说明没有ssh keys，可以跳过这一步，否则需要备份和移除原来的SSH Keys (因为我之前没有SSH Keys，所以我没有用到这一步)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ config  id_rsa  id_rsa.pub  known_hosts</span><br><span class="line">$ mkdir key_backup</span><br><span class="line">$ cp id_rsa* key_backup</span><br><span class="line">$ rm id_rsa*</span><br></pre></td></tr></table></figure><p>输入以下代码形成新的SSH Key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，回车就好。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C “your-email”</span><br><span class="line"></span><br><span class="line">显示：</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</span><br></pre></td></tr></table></figure><p>上面代码中的 “your-email” 就是你在学习Git时，你自己设置的Git用户名时给出的email地址 ( 我的话，使用的是注册github的email )。</p><p>然后系统会要你输入加密串（Passphrase）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;</span><br><span class="line">Enter same passphrase again:&lt;再次输入加密串&gt;</span><br></pre></td></tr></table></figure><p>最后看到SSH Key success，就成功设置SSH Key了。</p><h3 id="添加SSH-Key到GitHub"><a href="#添加SSH-Key到GitHub" class="headerlink" title="添加SSH Key到GitHub"></a>添加SSH Key到GitHub</h3><p>在本机设置SSH Key之后，需要添加到 GitHub 上，以完成SSH链接的设置。输入下面代码打开SSH文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open ~/.ssh</span><br></pre></td></tr></table></figure><p>用文本编辑工具打开 <strong>id_rsa.pub</strong> 文件。</p><p>登录Github，点击右侧自己的头像，选择 <strong>“setting”</strong> 。</p><p><img src="/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/githubSet.png" alt="Gihub Setting"></p><p>选择右侧的 <strong>“SSH and GPG Keys”</strong> 项，把 <strong>id_rsa.pub</strong> 文件中的内容复制到如下位置，然后点击 <strong>Add Key</strong> 按钮即可。</p><p><img src="/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/sshKey.jpg" alt="SSH Key"></p><p>PS：如果需要配置多个GitHub账号，可以参看这个 <a href="http://ju.outofmemory.cn/entry/16775" target="_blank" rel="noopener">多个github帐号的SSH key切换</a>，不过需要提醒一下的是，如果你只是通过这篇文章中所述配置了Host，那么你多个账号下面的提交用户会是一个人，所以需要通过命令git config –global –unset user.email删除用户账户设置，在每一个repo下面使用git config –local user.email ‘你的github邮箱@mail.com’命令单独设置用户账户信息。 （原po写的这个没看懂QAQ，反正暂时用不到，呼～）</p><p>可以输入下面的命令，看看设置是否成功，<a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>` 的部分不要修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果是下面的反应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>不要紧张，输入yes就好，然后会看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi &lt;em&gt;username&lt;/em&gt;! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><h3 id="设置你的账号信息"><a href="#设置你的账号信息" class="headerlink" title="设置你的账号信息"></a>设置你的账号信息</h3><p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。</p><p>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;你的名字&quot;</span><br><span class="line">$ git config --global user.email &quot;your_email@youremail.com&quot;</span><br></pre></td></tr></table></figure><p>好了，你已经可以成功连接GitHub了。</p><h2 id="基于Hexo搭建博客"><a href="#基于Hexo搭建博客" class="headerlink" title="基于Hexo搭建博客"></a>基于Hexo搭建博客</h2><h3 id="创建项目仓库"><a href="#创建项目仓库" class="headerlink" title="创建项目仓库"></a>创建项目仓库</h3><p>点击Github页面右上角的“+”的符号，选择 <strong>“New repository”</strong> ,然后在 <strong>“Repository name”</strong> 输入框里面填写 <code>username.github.io</code>，这里 “username” 是 Github 账号名。例如，下图中就是 <code>suncrazy.github.io</code>。</p><p><img src="/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/repoName.jpg" alt="Repo Name"></p><p>然后其他的地方都是默认即可，点击 <strong>“Create repository”</strong> 即可创建成功。到目前为止，github部分的内容就完成了。</p><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><p>接下来需要配置和使用Github，需要用到Git。Mac OS X 中自带Git，不需要安装，在Terminal中输入以下命令可以查看Git版本号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br></pre></td></tr></table></figure><h3 id="安装-Nodes-js"><a href="#安装-Nodes-js" class="headerlink" title="安装 Nodes.js"></a>安装 Nodes.js</h3><p>从 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Nodes官网</a> 下载并安装 Nodes.js。<br>Node.js 安装完成以后，npm 也被安装完成，简化了工作。检测安装是否成功，可以在 Mac Terminal 中输入以下命令查看 Node.js 和 npm 的版本号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>Git、Node.js 和 npm 安装完成以后，接下来就可以安装 Hexo 了。在 Mac Terminal 中输入以下命令即可执行安装（可能需要输入电脑密码）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install hexo -g</span><br></pre></td></tr></table></figure><p>安装完成后，输入以下命令查看Hexo版本号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure><h3 id="初始化-Hexo-和-Git"><a href="#初始化-Hexo-和-Git" class="headerlink" title="初始化 Hexo 和 Git"></a>初始化 Hexo 和 Git</h3><p>在根目录下，用以下语句新建一个文件夹，例如“blogGithub”，这个文件夹将是你的博客的根目录，以后与博客有关的所有文件都是存放在这里。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd</span><br><span class="line">$ mkdir blogGithub</span><br></pre></td></tr></table></figure><p>进入你新建的这个文件夹，执行Hexo初始化以及Git初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd blogGithub</span><br><span class="line">$ hexo init</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>这个时候，你会发现在 “～/blogGithub” 中多了很多文件夹。</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>在部署博客之前，需要先安装依赖，执行以下命令即可（可能需要输入电脑密码）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install</span><br></pre></td></tr></table></figure><h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><p>执行以下命令，生成静态页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>执行以下命令，启动服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>Terminal 界面如图所示。</p><p><img src="/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/hexoServer.png" alt="Hexo Server"></p><p>打开浏览器，输入 <code>http://localhost:4000/</code> ，如下图所示。</p><p><img src="/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/hexoPage.jpg" alt="Hexo Page"></p><p>这就是你的博客的界面，其中显示的内容是默认的内容，你可以随意修改。</p><p>回到Terminal界面，使用 <code>Ctrl+C</code> 停止服务。</p><h3 id="博客上传"><a href="#博客上传" class="headerlink" title="博客上传"></a>博客上传</h3><p>将博客内容上传到Github，需要安装Git部署器，执行以下命令安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装完成之后，利用文本编辑器打开 hexo 目录 (这里是 “～/blogGithub” ) 中的 “_config.yml” 文件，在文件最末尾，修改如下配置：</p><p><img src="/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/config.png" alt="Config"></p><p>其中，”username” 是Github账户名。</p><p>在 Hexo 目录 (这里是 “～/blogGithub” ) 下执行以下命令， 即可完成对将静态博客部署到 GitHub 上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>部署成功以后，在浏览器中输入 <code>http://username.github.io</code> 即可在线浏览自己的博客啦~</p><h2 id="创建新博客"><a href="#创建新博客" class="headerlink" title="创建新博客"></a>创建新博客</h2><p>以下命令均在 Hexo 目录 (这里是 “～/blogGithub” ) 下执行。</p><h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><p>新建博客，执行以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;text_blog&quot;</span><br></pre></td></tr></table></figure><p> 在 <code>/hexo/source/_posts/</code> 目录下即可看到一个名为 <code>test-blog.md</code> 文件，打开写入自己的博客内容。</p><h3 id="编写博客"><a href="#编写博客" class="headerlink" title="编写博客"></a>编写博客</h3><p>Mac 下可以考虑下载和安装 <a href="https://macdown.uranusjr.com/" target="_blank" rel="noopener">MacDown</a> 进行博客编写。博客编写使用 <a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown</a> 进行编写，在 MacDown 中，自带 help 文件，怎么写说得很详细，也可以参考 <a href="https://www.jianshu.com/p/148e26058916" target="_blank" rel="noopener">MacDown的使用规范总结</a> 。</p><p>在 Hexo 中，空格很重要，比如一级标题显示需要写成 <code># 一级标题</code> ，写成 <code>#一级标题</code> 就无法显示成一级标题。另外，为了方便插入图片，需要在 Hexo 目录下的 “_config.yml” 配置文件中，找到这个配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: false</span><br></pre></td></tr></table></figure><p>把这里的false改为true，开启hexo的媒体文件支持。</p><p>在命令行中，跳转到hexo目录下，使用以下语句安装图片插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>插件会安装到 “node_moudules” 目录下，名为 “hexo-asset-image”。以上执行完毕后，在命令行执行：hexo new “文件”时，会在_post文件夹下同时生成md文件和同名文件夹，这个同名文件夹就是用来放图片的，把你在该文章中需要显示的图片放进去，然后在markdown中选择该目录下的图片使用，这样当md编译生成html文件时，会把图片拷贝到html文件同目录中。最后执行hexo d -g 部署到服务器时，图片也就被部署到服务器中了。</p><p>注意：如果直接把图片拖动到markdown编辑器中，其路径可能为绝对路径，需要改下：</p><p><img src="/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/absolute.png" alt="absolute"></p><p>修改为相对路径：</p><p><img src="/2018/04/11/How-do-I-bulid-my-own-blog-with-Hexo-and-Github/relate.png" alt="relate"></p><h3 id="发布新博客"><a href="#发布新博客" class="headerlink" title="发布新博客"></a>发布新博客</h3><p>编辑好博客以后，即可执行以下命令部署到Github上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h2 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h2><p>了解Hexo命令可以看 <a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">这里</a>，这里列出一些常用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init       //在指定目录执行该命令，会将当前目录初始化为hexo站点，生成hexo站点所需的一切文件</span><br><span class="line">$ hexo new “my new blog title”   //新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</span><br><span class="line">$ hexo clean      // 清除缓存，如果对本地文件做了修改，同步到远程验证修改的效果之前，先clean，清除缓存</span><br><span class="line">$ hexo generate   // 可以简写成hexo g 根据markdown文件生成静态文件</span><br><span class="line">$ hexo server     // 或者简写成hexo s 启动本地hexo 服务器，默认localhost:4000可以访问</span><br><span class="line">$ hexo deploy     // 或者简写成hexo d 将本地修改，部署到远端</span><br><span class="line">$ hexo version    // 显示hexo版本</span><br></pre></td></tr></table></figure><p>一些快捷键：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g == hexo generate</span><br><span class="line">$ hexo d == hexo deploy</span><br><span class="line">$ hexo s == hexo server</span><br><span class="line">$ hexo n == hexo new</span><br></pre></td></tr></table></figure><h2 id="配置博客主题"><a href="#配置博客主题" class="headerlink" title="配置博客主题"></a>配置博客主题</h2><p>上面的内容是搭建起了一个正常的博客，但是如果我们想要一个更加好看的博客界面的话，我们必须得使用别的主题。进入 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官网</a> 可以选择很多主题，我选择的是 <a href="https://github.com/fi3ework/hexo-theme-archer" target="_blank" rel="noopener">hexo-theme-archer</a> 。原po做得特别好，而且遇到问题问他，回复速度也巨快～。在按照原po在Github上写的说明就可以修改完配置文件后，运行下列语句即可部署到 Github 上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>此处感谢一下各位写详细教程的大大们，毕竟小白我才体会到，写一篇教程要花很多时间和精力。另外特别感谢下博客主题的作者 <strong>fi3ework</strong> 贡献的主题，作者 <a href="https://github.com/fi3ework" target="_blank" rel="noopener">Github</a> ， 博客主题 <a href="https://github.com/fi3ework/hexo-theme-archer" target="_blank" rel="noopener">hexo-theme-archer</a> 。</p><p>[1] <a href="https://zhuanlan.zhihu.com/p/22718911" target="_blank" rel="noopener">github+hexo+jacman搭建个人博客</a></p><p>[2] <a href="https://www.ezlippi.com/blog/2015/03/github-pages-blog.html" target="_blank" rel="noopener">利用github-pages建立个人博客</a></p><p>[3] <a href="http://lijiankun24.com/Mac%E4%B8%8BHexo%E5%92%8CGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A21/" target="_blank" rel="noopener">Mac 下 Hexo 和 GitHub-Pages 搭建个人博客（一）</a></p><p>[4] <a href="https://madongqiang2201.github.io/2016/07/21/Mac%E4%B8%8BHexo%EF%BC%8Bgithub-pages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">Mac搭建Hexo博客及NexT主题配置优化</a></p><p>[5] <a href="http://www.jensondev.me/2017/04/25/hexo%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E5%8F%91%E5%B8%83%E5%90%8E%E4%B8%8D%E8%83%BD%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">hexo本地图片发布后不能显示的问题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨晚熬夜终于搭好了一个属于自己的博客，但是对markdown语法还不是很熟悉，于是决定写一篇搭博客的教程来熟悉一下。前人掉坑，后人绕行。那么，废话不多说，就开始吧！:)&lt;/p&gt;
&lt;p&gt;本文主要是针对 &lt;strong&gt;Mac OS&lt;/strong&gt; 系统上基于 &lt;strong
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Hello 2018</title>
    <link href="http://yoursite.com/2018/04/11/Hello-2018/"/>
    <id>http://yoursite.com/2018/04/11/Hello-2018/</id>
    <published>2018-04-11T06:16:24.000Z</published>
    <updated>2018-04-11T23:12:41.709Z</updated>
    
    <content type="html"><![CDATA[<p>Hello, this is my very first blog. I’m new to GitHub and still have much to learn. </p><p>I’m going to write something related to what I read and my research. We can discuss in this blog and learn together. :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hello, this is my very first blog. I’m new to GitHub and still have much to learn. &lt;/p&gt;
&lt;p&gt;I’m going to write something related to what I
      
    
    </summary>
    
    
  </entry>
  
</feed>
